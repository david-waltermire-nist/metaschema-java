diff --git a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/AbstractJsonDeserializer.java b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/AbstractJsonDeserializer.java
index 2c37772..22f6962 100644
--- a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/AbstractJsonDeserializer.java
+++ b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/AbstractJsonDeserializer.java
@@ -125,7 +125,7 @@ abstract class AbstractJsonDeserializer<CLASS> extends AbstractDeserializer<CLAS
 
     BindingContext bindingContext = getBindingContext();
     JsonParsingContext parsingContext = new DefaultJsonParsingContext(parser, bindingContext);
-    return classBinding.getJsonReader(bindingContext).readJson(parsingContext, null, isParseRoot).get(0);
+    return classBinding.getJsonReader(bindingContext).readJson(null, null, isParseRoot, parsingContext).get(0);
   }
 
 }
diff --git a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/AssemblyPropertyItemHandler.java b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/AssemblyPropertyItemHandler.java
index 3e78879..ae02cfb 100644
--- a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/AssemblyPropertyItemHandler.java
+++ b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/AssemblyPropertyItemHandler.java
@@ -46,15 +46,15 @@ public class AssemblyPropertyItemHandler
   }
 
   @Override
-  public List<Object> parse(JsonParsingContext parsingContext, PropertyBindingFilter filter) throws BindingException {
+  public List<Object> parse(PropertyBindingFilter filter, Object parent, JsonParsingContext parsingContext) throws BindingException {
     JsonReader<?> jsonReader = getClassBinding().getJsonReader(parsingContext.getBindingContext());
     @SuppressWarnings("unchecked")
-    List<Object> retval = (List<Object>) jsonReader.readJson(parsingContext, filter, false);
+    List<Object> retval = (List<Object>) jsonReader.readJson(filter, parent, false, parsingContext);
     return retval;
   }
 
   @Override
-  public void writeValue(Object value, JsonWritingContext writingContext, PropertyBindingFilter filter)
+  public void writeValue(Object value, PropertyBindingFilter filter, JsonWritingContext writingContext)
       throws BindingException, IOException {
     AssemblyJsonWriter<?> jsonWriter = getClassBinding().getAssemblyJsonWriter(writingContext.getBindingContext());
     jsonWriter.writeJson(value, filter, writingContext);
diff --git a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/DataTypePropertyItemHandler.java b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/DataTypePropertyItemHandler.java
index a24380c..b218a78 100644
--- a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/DataTypePropertyItemHandler.java
+++ b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/DataTypePropertyItemHandler.java
@@ -44,7 +44,7 @@ public class DataTypePropertyItemHandler extends AbstractProperrtyItemHandler<Pr
   }
 
   @Override
-  public List<Object> parse(JsonParsingContext parsingContext, PropertyBindingFilter filter) throws BindingException {
+  public List<Object> parse(PropertyBindingFilter filter, Object parent, JsonParsingContext parsingContext) throws BindingException {
     JavaTypeAdapter<?> adapter
         = parsingContext.getBindingContext().getJavaTypeAdapter(getPropertyBinding().getPropertyInfo().getItemType());
 
@@ -52,12 +52,11 @@ public class DataTypePropertyItemHandler extends AbstractProperrtyItemHandler<Pr
   }
 
   @Override
-  public void writeValue(Object value, JsonWritingContext writingContext, PropertyBindingFilter filter)
+  public void writeValue(Object value, PropertyBindingFilter filter, JsonWritingContext writingContext)
       throws BindingException, IOException {
     JavaTypeAdapter<?> adapter
         = writingContext.getBindingContext().getJavaTypeAdapter(getPropertyBinding().getPropertyInfo().getItemType());
 
     adapter.writeJsonFieldValue(value, filter, writingContext);
   }
-
 }
diff --git a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/FieldPropertyItemHandler.java b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/FieldPropertyItemHandler.java
index e54bf44..8deae33 100644
--- a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/FieldPropertyItemHandler.java
+++ b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/FieldPropertyItemHandler.java
@@ -46,15 +46,15 @@ public class FieldPropertyItemHandler
   }
 
   @Override
-  public List<Object> parse(JsonParsingContext parsingContext, PropertyBindingFilter filter) throws BindingException {
+  public List<Object> parse(PropertyBindingFilter filter, Object parent, JsonParsingContext parsingContext) throws BindingException {
     JsonReader<?> jsonReader = getClassBinding().getJsonReader(parsingContext.getBindingContext());
     @SuppressWarnings("unchecked")
-    List<Object> retval = (List<Object>) jsonReader.readJson(parsingContext, filter, false);
+    List<Object> retval = (List<Object>) jsonReader.readJson(filter, parent, false, parsingContext);
     return retval;
   }
 
   @Override
-  public void writeValue(Object value, JsonWritingContext writingContext, PropertyBindingFilter filter)
+  public void writeValue(Object value, PropertyBindingFilter filter, JsonWritingContext writingContext)
       throws BindingException, IOException {
     AssemblyJsonWriter<?> jsonWriter = getClassBinding().getAssemblyJsonWriter(writingContext.getBindingContext());
     jsonWriter.writeJson(value, filter, writingContext);
diff --git a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/ListPropertyValueHandler.java b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/ListPropertyValueHandler.java
index fbdbc6b..4d621d8 100644
--- a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/ListPropertyValueHandler.java
+++ b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/ListPropertyValueHandler.java
@@ -55,7 +55,7 @@ public class ListPropertyValueHandler extends AbstractPropertyValueHandler {
   }
 
   @Override
-  public boolean parseNextFieldValue(JsonParsingContext parsingContext) throws BindingException, IOException {
+  public boolean parseNextFieldValue(Object parent, JsonParsingContext parsingContext) throws BindingException, IOException {
     JsonParser parser = parsingContext.getEventReader();
     JsonToken currentToken = parser.currentToken();
 
@@ -74,7 +74,7 @@ public class ListPropertyValueHandler extends AbstractPropertyValueHandler {
     // Parse the value at the current token; after parsing the current token is
     // expected to be at the next START_OBJECT, END_ARRAY, or FIELD_NAME
     PropertyItemHandler propertyItemHandler = getPropertyItemHandler();
-    List<Object> parsedValues = propertyItemHandler.parse(parsingContext, null);
+    List<Object> parsedValues = propertyItemHandler.parse(null, parent, parsingContext);
 
     // if (!JsonUtil.checkEndOfValue(parser, currentToken)) {
     // throw new BindingException(String.format("Unexpected end state token '%s' after parsing %s.",
diff --git a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/MapPropertyValueHandler.java b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/MapPropertyValueHandler.java
index b67bebb..75a0493 100644
--- a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/MapPropertyValueHandler.java
+++ b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/MapPropertyValueHandler.java
@@ -61,7 +61,7 @@ public class MapPropertyValueHandler extends AbstractPropertyValueHandler {
   }
 
   @Override
-  public boolean parseNextFieldValue(JsonParsingContext parsingContext) throws BindingException, IOException {
+  public boolean parseNextFieldValue(Object parent, JsonParsingContext parsingContext) throws BindingException, IOException {
     /*
      * JSON will look like this:
      * 
@@ -92,7 +92,7 @@ public class MapPropertyValueHandler extends AbstractPropertyValueHandler {
     // Parse the value(s) at the current token; after this the current token is
     // expected to be the end of the value (e.g., VALUE, END_OBJECT
     PropertyItemHandler propertyItemHandler = getPropertyItemHandler();
-    List<Object> parsedValues = propertyItemHandler.parse(parsingContext, null);
+    List<Object> parsedValues = propertyItemHandler.parse(null, parent, parsingContext);
 
     // // Check end of parsed value
     // JsonUtil.checkEndOfValue(parser, currentToken);
diff --git a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/PropertyItemHandler.java b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/PropertyItemHandler.java
index 8948411..451e2bf 100644
--- a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/PropertyItemHandler.java
+++ b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/PropertyItemHandler.java
@@ -72,9 +72,9 @@ public interface PropertyItemHandler {
 
   PropertyBinding getPropertyBinding();
 
-  List<Object> parse(JsonParsingContext parsingContext, PropertyBindingFilter filter)
+  List<Object> parse(PropertyBindingFilter filter, Object parent, JsonParsingContext parsingContext)
       throws BindingException, IOException;
 
-  void writeValue(Object value, JsonWritingContext writingContext, PropertyBindingFilter filter)
+  void writeValue(Object value, PropertyBindingFilter filter, JsonWritingContext writingContext)
       throws BindingException, IOException;
 }
diff --git a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/PropertyValueHandler.java b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/PropertyValueHandler.java
index 30f5078..7b24973 100644
--- a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/PropertyValueHandler.java
+++ b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/PropertyValueHandler.java
@@ -96,7 +96,7 @@ public interface PropertyValueHandler {
    * @throws IOException
    *           if an input error has occurred while parsing
    */
-  boolean parseNextFieldValue(JsonParsingContext parsingContext) throws BindingException, IOException;
+  boolean parseNextFieldValue(Object parent, JsonParsingContext parsingContext) throws BindingException, IOException;
 
   Supplier<? extends Object> getObjectSupplier();
 }
diff --git a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/SingletonPropertyValueHandler.java b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/SingletonPropertyValueHandler.java
index b06adf8..6ca3253 100644
--- a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/SingletonPropertyValueHandler.java
+++ b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/SingletonPropertyValueHandler.java
@@ -43,11 +43,11 @@ public class SingletonPropertyValueHandler extends AbstractPropertyValueHandler
   }
 
   @Override
-  public boolean parseNextFieldValue(JsonParsingContext parsingContext) throws BindingException, IOException {
+  public boolean parseNextFieldValue(Object parent, JsonParsingContext parsingContext) throws BindingException, IOException {
     // Parse the value at the current token; after this the current token is
     // expected to be the end of the value (e.g., VALUE, END_OBJECT
     PropertyItemHandler propertyItemHandler = getPropertyItemHandler();
-    List<Object> values = propertyItemHandler.parse(parsingContext, null);
+    List<Object> values = propertyItemHandler.parse(null, parent, parsingContext);
 
     if (values == null) {
       throw new BindingException(
diff --git a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/parser/AbstractBoundObjectParser.java b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/parser/AbstractBoundObjectParser.java
index 8f2b5c3..66ed335 100644
--- a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/parser/AbstractBoundObjectParser.java
+++ b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/parser/AbstractBoundObjectParser.java
@@ -82,7 +82,7 @@ public abstract class AbstractBoundObjectParser<CLASS, CLASS_BINDING extends Cla
     return unknownPropertyHandler;
   }
 
-  protected void parseProperties(Map<String, PropertyBinding> propertyBindings) throws IOException, BindingException {
+  protected void parseProperties(Map<String, PropertyBinding> propertyBindings, Object parent) throws IOException, BindingException {
     JsonParsingContext parsingContext = getParsingContext();
     JsonParser parser = parsingContext.getEventReader();
     JsonProblemHandler problemHandler = parsingContext.getProblemHandler();
@@ -132,7 +132,7 @@ public abstract class AbstractBoundObjectParser<CLASS, CLASS_BINDING extends Cla
 
         // if the callback doesn't opt to parse the property, parse it here
         if (!propertyParser.parse(propertyBinding)) {
-          Supplier<? extends Object> supplier = parseProperty(propertyBinding, parsingContext);
+          Supplier<? extends Object> supplier = parseProperty(propertyBinding, parent, parsingContext);
           propertyBindingSupplier.apply(propertyBinding, supplier);
         }
         parsedProperties.add(nextFieldName);
@@ -176,13 +176,13 @@ public abstract class AbstractBoundObjectParser<CLASS, CLASS_BINDING extends Cla
    * @throws IOException
    *           if an input error has occurred
    */
-  public Supplier<? extends Object> parseProperty(PropertyBinding propertyBinding, JsonParsingContext parsingContext)
+  public Supplier<? extends Object> parseProperty(PropertyBinding propertyBinding, Object parent, JsonParsingContext parsingContext)
       throws BindingException, IOException {
 
     PropertyValueHandler propertyValueHandler
         = PropertyValueHandler.newPropertyValueHandler(getClassBinding(), propertyBinding, parsingContext);
 
-    while (propertyValueHandler.parseNextFieldValue(parsingContext)) {
+    while (propertyValueHandler.parseNextFieldValue(parent, parsingContext)) {
       // after calling parseNextField the current token is expected to be at the next
       // field to parse or at the END_OBJECT for the containing object
     }
diff --git a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/parser/AbstractJsonReader.java b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/parser/AbstractJsonReader.java
index f85ac0e..bcef025 100644
--- a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/parser/AbstractJsonReader.java
+++ b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/parser/AbstractJsonReader.java
@@ -48,16 +48,16 @@ public abstract class AbstractJsonReader<CLASS, CLASS_BINDING extends ClassBindi
       throws BindingException;
 
   @Override
-  public List<CLASS> readJson(JsonParsingContext parsingContext, PropertyBindingFilter filter, boolean parseRoot)
+  public List<CLASS> readJson(PropertyBindingFilter filter, Object parent, boolean parseRoot, JsonParsingContext parsingContext)
       throws BindingException {
 
     OBJECT_PARSER parser = newObjectParser(filter, parsingContext);
 
-    return readJsonInternal(parser, parseRoot);
+    return readJsonInternal(parser, parent, parseRoot);
   }
 
-  protected List<CLASS> readJsonInternal(OBJECT_PARSER parser, @SuppressWarnings("unused") boolean parseRoot)
+  protected List<CLASS> readJsonInternal(OBJECT_PARSER parser, Object parent, @SuppressWarnings("unused") boolean parseRoot)
       throws BindingException {
-    return parser.parseObjects();
+    return parser.parseObjects(parent);
   }
 }
diff --git a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/parser/AssemblyJsonReader.java b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/parser/AssemblyJsonReader.java
index 9c4f269..d036b66 100644
--- a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/parser/AssemblyJsonReader.java
+++ b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/parser/AssemblyJsonReader.java
@@ -75,7 +75,7 @@ public class AssemblyJsonReader<CLASS> extends AbstractJsonReader<CLASS, Assembl
 
   @Override
   protected List<CLASS> readJsonInternal(SingleBoundObjectParser<CLASS, AssemblyClassBinding<CLASS>> parser,
-      boolean parseRoot) throws BindingException {
+      Object parent, boolean parseRoot) throws BindingException {
     List<CLASS> retval;
     if (parseRoot) {
       try {
@@ -84,7 +84,7 @@ public class AssemblyJsonReader<CLASS> extends AbstractJsonReader<CLASS, Assembl
         throw new BindingException(ex);
       }
     } else {
-      retval = super.readJsonInternal(parser, false);
+      retval = super.readJsonInternal(parser, parent, false);
     }
     return retval;
   }
@@ -117,7 +117,7 @@ public class AssemblyJsonReader<CLASS> extends AbstractJsonReader<CLASS, Assembl
       if (fieldName.equals(rootName)) {
         // process the object value, bound to the requested class
         JsonUtil.readNextToken(parser, JsonToken.START_OBJECT);
-        retval = super.readJsonInternal(objParser, false);
+        retval = super.readJsonInternal(objParser, null, false);
       } else if (ignoreRootFields.contains(fieldName)) {
         // ignore the field
         JsonUtil.skipValue(parser);
diff --git a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/parser/BoundObjectParser.java b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/parser/BoundObjectParser.java
index 544e452..8e852cb 100644
--- a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/parser/BoundObjectParser.java
+++ b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/parser/BoundObjectParser.java
@@ -33,7 +33,7 @@ import java.util.List;
 
 public interface BoundObjectParser<CLASS, CLASS_BINDING extends ClassBinding<CLASS>> {
 
-  List<CLASS> parseObjects() throws BindingException;
+  List<CLASS> parseObjects(Object parent) throws BindingException;
 
   JsonParsingContext getParsingContext();
 
diff --git a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/parser/CollapsedFieldObjectParser.java b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/parser/CollapsedFieldObjectParser.java
index 45850a1..231877a 100644
--- a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/parser/CollapsedFieldObjectParser.java
+++ b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/parser/CollapsedFieldObjectParser.java
@@ -86,7 +86,7 @@ public class CollapsedFieldObjectParser<CLASS> extends AbstractBoundObjectParser
       ListPropertyValueHandler propertyValueHandler
           = new ListPropertyValueHandler(getClassBinding(), propertyItemHandler, true);
       try {
-        while (propertyValueHandler.parseNextFieldValue(parsingContext)) {
+        while (propertyValueHandler.parseNextFieldValue(null, parsingContext)) {
           // after calling parseNextField the current token is expected to be at the next
           // field to parse or at the END_OBJECT for the containing object
         }
@@ -101,19 +101,21 @@ public class CollapsedFieldObjectParser<CLASS> extends AbstractBoundObjectParser
   }
 
   @Override
-  public List<CLASS> parseObjects() throws BindingException {
+  public List<CLASS> parseObjects(Object parent) throws BindingException {
     Map<String, PropertyBinding> propertyBindings = getJsonPropertyBindings();
     FieldValuePropertyBinding valuePropertyBinding = getClassBinding().getFieldValuePropertyBinding();
 
     List<CLASS> retval = new LinkedList<CLASS>();
     try {
-      parseProperties(propertyBindings);
+      parseProperties(propertyBindings, null);
     } catch (IOException ex) {
       throw new BindingException(ex);
     }
 
     for (Object fieldValue : values) {
       CLASS obj = getClassBinding().newInstance();
+      getClassBinding().callBeforeDeserialize(obj, parent);
+
       for (Map.Entry<PropertyBinding, Supplier<?>> entry : bindings.entrySet()) {
         PropertyBinding propertyBinding = entry.getKey();
         Supplier<?> supplier = entry.getValue();
@@ -129,6 +131,8 @@ public class CollapsedFieldObjectParser<CLASS> extends AbstractBoundObjectParser
       }
 
       valuePropertyBinding.getPropertyInfo().setValue(obj, fieldValue);
+
+      getClassBinding().callAfterDeserialize(obj, parent);
     }
     if (retval.isEmpty()) {
       retval = null;
diff --git a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/parser/JsonReader.java b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/parser/JsonReader.java
index 1962f88..23ea4a8 100644
--- a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/parser/JsonReader.java
+++ b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/parser/JsonReader.java
@@ -32,6 +32,6 @@ import gov.nist.secauto.metaschema.binding.model.property.PropertyBindingFilter;
 import java.util.List;
 
 public interface JsonReader<CLASS> {
-  List<CLASS> readJson(JsonParsingContext parsingContext, PropertyBindingFilter filter, boolean parseRoot)
+  List<CLASS> readJson(PropertyBindingFilter filter, Object parent, boolean parseRoot, JsonParsingContext parsingContext)
       throws BindingException;
 }
diff --git a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/parser/SingleBoundObjectParser.java b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/parser/SingleBoundObjectParser.java
index 4351a95..75f79bd 100644
--- a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/parser/SingleBoundObjectParser.java
+++ b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/json/parser/SingleBoundObjectParser.java
@@ -66,17 +66,19 @@ public class SingleBoundObjectParser<CLASS, CLASS_BINDING extends ClassBinding<C
   }
 
   @Override
-  public List<CLASS> parseObjects() throws BindingException {
+  public List<CLASS> parseObjects(Object parent) throws BindingException {
+    CLASS instance = getInstance();
+
+    getClassBinding().callBeforeDeserialize(instance, parent);
     Map<String, PropertyBinding> propertyBindings = getJsonPropertyBindings();
 
     try {
-      parseProperties(propertyBindings);
+      parseProperties(propertyBindings, instance);
     } catch (IOException ex) {
       throw new BindingException(ex);
     }
 
-    CLASS instance = getInstance();
-
+    getClassBinding().callBeforeDeserialize(instance, parent);
     return instance != null ? new LinkedList<CLASS>(Collections.singletonList(instance)) : null;
   }
 
diff --git a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/xml/parser/AbstractXmlParsePlan.java b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/xml/parser/AbstractXmlParsePlan.java
index f0989a7..d6cd384 100644
--- a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/xml/parser/AbstractXmlParsePlan.java
+++ b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/io/xml/parser/AbstractXmlParsePlan.java
@@ -106,6 +106,8 @@ public abstract class AbstractXmlParsePlan<CLASS, CLASS_BINDING extends ClassBin
     // TODO: handle start element in parent, but handle root here
     XMLEventReader2 reader = parsingContext.getEventReader();
     CLASS obj = getClassBinding().newInstance();
+    // TODO: pass in parent
+    getClassBinding().callBeforeDeserialize(obj, null);
     try {
 
       if (logger.isDebugEnabled()) {
@@ -160,6 +162,8 @@ public abstract class AbstractXmlParsePlan<CLASS, CLASS_BINDING extends ClassBin
     } catch (XMLStreamException ex) {
       throw new BindingException(ex);
     }
+    // TODO: pass in parent
+    getClassBinding().callAfterDeserialize(obj, null);
     return obj;
   }
 
diff --git a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/model/AbstractClassBinding.java b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/model/AbstractClassBinding.java
index 467ffc7..4f29104 100644
--- a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/model/AbstractClassBinding.java
+++ b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/model/AbstractClassBinding.java
@@ -37,6 +37,7 @@ import gov.nist.secauto.metaschema.binding.model.property.PropertyBindingFilter;
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
@@ -144,4 +145,35 @@ abstract class AbstractClassBinding<CLASS, XML_PARSE_PLAN extends XmlParsePlan<C
     return retval;
   }
 
+  @Override
+  public void callBeforeDeserialize(Object obj, Object parent) throws BindingException {
+    Class<?> searchClass = getClazz();
+    do {
+      try {
+        Method method = searchClass.getDeclaredMethod("beforeDeserialize", Object.class);
+        method.invoke(obj, parent);
+        
+      } catch (NoSuchMethodException ex) {
+        // do nothing
+      } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException ex) {
+        throw new BindingException(ex);
+      }
+    } while ((searchClass = searchClass.getSuperclass()) != null);
+  }
+
+  @Override
+  public void callAfterDeserialize(Object obj, Object parent) throws BindingException {
+    Class<?> searchClass = getClazz();
+    do {
+      try {
+        Method method = searchClass.getDeclaredMethod("afterDeserialize", Object.class);
+        method.invoke(obj, parent);
+      } catch (NoSuchMethodException ex) {
+        // do nothing
+      } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException ex) {
+        throw new BindingException(ex);
+      }
+    } while ((searchClass = searchClass.getSuperclass()) != null);
+  }
+
 }
diff --git a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/model/ClassBinding.java b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/model/ClassBinding.java
index 98e9b19..6a3fdc3 100644
--- a/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/model/ClassBinding.java
+++ b/java/metaschema-java-binding/src/main/java/gov/nist/secauto/metaschema/binding/model/ClassBinding.java
@@ -45,28 +45,6 @@ import java.util.List;
 import java.util.Map;
 
 public interface ClassBinding<CLASS> {
-  Class<CLASS> getClazz();
-
-  List<FlagPropertyBinding> getFlagPropertyBindings();
-
-  FlagPropertyBinding getJsonKeyFlagPropertyBinding();
-
-  Map<String, PropertyBinding> getJsonPropertyBindings(BindingContext bindingContext, PropertyBindingFilter filter)
-      throws BindingException;
-
-  boolean hasRootWrapper();
-
-  RootWrapper getRootWrapper();
-
-  XmlParsePlan<CLASS> getXmlParsePlan(BindingContext bindingContext) throws BindingException;
-
-  XmlWriter getXmlWriter() throws BindingException;
-
-  AssemblyJsonWriter<CLASS> getAssemblyJsonWriter(BindingContext bindingContext) throws BindingException;
-
-  JsonReader<CLASS> getJsonReader(BindingContext bindingContext) throws BindingException;
-
-  CLASS newInstance() throws BindingException;
 
   public static <CLASS> ClassBinding<CLASS> newClassBinding(Class<CLASS> clazz) throws BindingException {
     boolean hasFlag = false;
@@ -99,4 +77,31 @@ public interface ClassBinding<CLASS> {
     }
     return retval;
   }
+
+  Class<CLASS> getClazz();
+
+  List<FlagPropertyBinding> getFlagPropertyBindings();
+
+  FlagPropertyBinding getJsonKeyFlagPropertyBinding();
+
+  Map<String, PropertyBinding> getJsonPropertyBindings(BindingContext bindingContext, PropertyBindingFilter filter)
+      throws BindingException;
+
+  boolean hasRootWrapper();
+
+  RootWrapper getRootWrapper();
+
+  XmlParsePlan<CLASS> getXmlParsePlan(BindingContext bindingContext) throws BindingException;
+
+  XmlWriter getXmlWriter() throws BindingException;
+
+  AssemblyJsonWriter<CLASS> getAssemblyJsonWriter(BindingContext bindingContext) throws BindingException;
+
+  JsonReader<CLASS> getJsonReader(BindingContext bindingContext) throws BindingException;
+
+  CLASS newInstance() throws BindingException;
+
+  void callBeforeDeserialize(Object obj, Object parent) throws BindingException;
+
+  void callAfterDeserialize(Object obj, Object parent) throws BindingException;
 }
diff --git a/java/metaschema-java-binding/src/test/java/gov/nist/secauto/metaschema/binding/io/json/ListPropertyValueHandlerTest.java b/java/metaschema-java-binding/src/test/java/gov/nist/secauto/metaschema/binding/io/json/ListPropertyValueHandlerTest.java
index d99790a..f62e614 100644
--- a/java/metaschema-java-binding/src/test/java/gov/nist/secauto/metaschema/binding/io/json/ListPropertyValueHandlerTest.java
+++ b/java/metaschema-java-binding/src/test/java/gov/nist/secauto/metaschema/binding/io/json/ListPropertyValueHandlerTest.java
@@ -77,7 +77,7 @@ class ListPropertyValueHandlerTest {
       }
 
       @Override
-      public List<Object> parse(JsonParsingContext parsingContext, PropertyBindingFilter filter)
+      public List<Object> parse(PropertyBindingFilter filter, Object parent, JsonParsingContext parsingContext)
           throws BindingException, IOException {
         JsonParser parser = parsingContext.getEventReader();
         assertEquals(JsonToken.START_OBJECT, parser.currentToken());
@@ -91,7 +91,7 @@ class ListPropertyValueHandlerTest {
       }
 
       @Override
-      public void writeValue(Object value, JsonWritingContext writingContext, PropertyBindingFilter filter)
+      public void writeValue(Object value, PropertyBindingFilter filter, JsonWritingContext writingContext)
           throws BindingException, IOException {
         throw new UnsupportedOperationException();
       }
@@ -109,7 +109,7 @@ class ListPropertyValueHandlerTest {
     parser.nextToken();
 
     for (int i = 0; i < count; i++) {
-      assertEquals(count != i + 1, propertyValueHandler.parseNextFieldValue(parsingContext), "when parsing item #" + i);
+      assertEquals(count != i + 1, propertyValueHandler.parseNextFieldValue(null, parsingContext), "when parsing item #" + i);
     }
 
     @SuppressWarnings("unchecked")
diff --git a/java/metaschema-java-binding/src/test/java/gov/nist/secauto/metaschema/binding/io/json/MapPropertyValueHandlerTest.java b/java/metaschema-java-binding/src/test/java/gov/nist/secauto/metaschema/binding/io/json/MapPropertyValueHandlerTest.java
index dcba6fb..60246ec 100644
--- a/java/metaschema-java-binding/src/test/java/gov/nist/secauto/metaschema/binding/io/json/MapPropertyValueHandlerTest.java
+++ b/java/metaschema-java-binding/src/test/java/gov/nist/secauto/metaschema/binding/io/json/MapPropertyValueHandlerTest.java
@@ -92,7 +92,7 @@ class MapPropertyValueHandlerTest {
       }
 
       @Override
-      public List<Object> parse(JsonParsingContext parsingContext, PropertyBindingFilter filter)
+      public List<Object> parse(PropertyBindingFilter filter, Object parent, JsonParsingContext parsingContext)
           throws BindingException, IOException {
         JsonParser parser = parsingContext.getEventReader();
         assertEquals(JsonToken.START_OBJECT, parser.currentToken());
@@ -106,7 +106,7 @@ class MapPropertyValueHandlerTest {
       }
 
       @Override
-      public void writeValue(Object value, JsonWritingContext writingContext, PropertyBindingFilter filter)
+      public void writeValue(Object value, PropertyBindingFilter filter, JsonWritingContext writingContext)
           throws BindingException, IOException {
         throw new UnsupportedOperationException();
       }
@@ -124,7 +124,7 @@ class MapPropertyValueHandlerTest {
     currentToken = parser.nextToken();
 
     for (int i = 0; i < count; i++) {
-      assertEquals(count != i + 1, propertyValueHandler.parseNextFieldValue(parsingContext), "when parsing item #" + i);
+      assertEquals(count != i + 1, propertyValueHandler.parseNextFieldValue(null, parsingContext), "when parsing item #" + i);
     }
 
     currentToken = parser.currentToken();
diff --git a/java/metaschema-java-codegen/pom.xml b/java/metaschema-java-codegen/pom.xml
index cf09e4c..5b3ab36 100644
--- a/java/metaschema-java-codegen/pom.xml
+++ b/java/metaschema-java-codegen/pom.xml
@@ -29,11 +29,6 @@
 			<groupId>${project.parent.groupId}</groupId>
 			<artifactId>metaschema-java-binding</artifactId>
 		</dependency>
-
-		<dependency>
-			<groupId>javax.activation</groupId>
-			<artifactId>activation</artifactId>
-		</dependency>
 		<dependency>
 			<groupId>org.apache.commons</groupId>
 			<artifactId>commons-lang3</artifactId>
@@ -51,4 +46,47 @@
 		<!-- </dependency> -->
 
 	</dependencies>
+	<build>
+		<plugins>
+			<plugin>
+				<groupId>org.codehaus.mojo</groupId>
+				<artifactId>xmlbeans-maven-plugin</artifactId>
+				<version>2.3.3</version>
+				<executions>
+					<execution>
+						<id>metaschema</id>
+						<goals>
+							<goal>xmlbeans</goal>
+						</goals>
+						<configuration>
+							<noUpa>false</noUpa>
+							<javaSource>1.5</javaSource>
+							<noJavac>true</noJavac>
+							<sourceGenerationDirectory>${project.build.directory}/generated-sources/xmlbeans</sourceGenerationDirectory>
+<!-- 							<xmlConfigs> -->
+<!-- 								<xmlConfig implementation="java.io.File">${project.basedir}/src/main/xsdconfig/metaschema.xsdconfig</xmlConfig> -->
+<!-- 							</xmlConfigs> -->
+						</configuration>
+					</execution>
+				</executions>
+				<dependencies>
+					<dependency>
+						<groupId>org.apache.xmlbeans</groupId>
+						<artifactId>xmlbeans</artifactId>
+						<version>${dependency.xmlbeans.version}</version>
+					</dependency>
+				</dependencies>
+			</plugin>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-checkstyle-plugin</artifactId>
+				<configuration>
+					<sourceDirectories>
+						<sourceDirectory>${project.build.sourceDirectory}</sourceDirectory>
+						<sourceDirectory>${project.build.testSourceDirectory}</sourceDirectory>
+					</sourceDirectories>
+				</configuration>
+			</plugin>
+		</plugins>
+	</build>
 </project>
diff --git a/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/AbstractClassGenerator.java b/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/AbstractClassGenerator.java
index aab876d..09e5711 100644
--- a/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/AbstractClassGenerator.java
+++ b/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/AbstractClassGenerator.java
@@ -27,6 +27,7 @@
 package gov.nist.secauto.metaschema.codegen;
 
 import gov.nist.secauto.metaschema.binding.model.annotations.MetaschemaModel;
+import gov.nist.secauto.metaschema.codegen.binding.config.JavaTypeSupplier;
 import gov.nist.secauto.metaschema.codegen.builder.ClassBuilder;
 import gov.nist.secauto.metaschema.codegen.builder.MethodBuilder;
 import gov.nist.secauto.metaschema.codegen.type.JavaType;
diff --git a/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/AssemblyClassGenerator.java b/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/AssemblyClassGenerator.java
index a6a5ce3..613e9f1 100644
--- a/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/AssemblyClassGenerator.java
+++ b/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/AssemblyClassGenerator.java
@@ -27,6 +27,7 @@
 package gov.nist.secauto.metaschema.codegen;
 
 import gov.nist.secauto.metaschema.binding.model.annotations.RootWrapper;
+import gov.nist.secauto.metaschema.codegen.binding.config.JavaTypeSupplier;
 import gov.nist.secauto.metaschema.codegen.builder.ClassBuilder;
 import gov.nist.secauto.metaschema.codegen.type.DataType;
 import gov.nist.secauto.metaschema.codegen.type.JavaType;
diff --git a/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/FieldClassGenerator.java b/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/FieldClassGenerator.java
index be57d78..94e209e 100644
--- a/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/FieldClassGenerator.java
+++ b/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/FieldClassGenerator.java
@@ -27,6 +27,7 @@
 package gov.nist.secauto.metaschema.codegen;
 
 import gov.nist.secauto.metaschema.binding.model.annotations.Collapsible;
+import gov.nist.secauto.metaschema.codegen.binding.config.JavaTypeSupplier;
 import gov.nist.secauto.metaschema.codegen.builder.ClassBuilder;
 import gov.nist.secauto.metaschema.codegen.type.DataType;
 import gov.nist.secauto.metaschema.model.info.definitions.FieldDefinition;
diff --git a/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/JavaGenerator.java b/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/JavaGenerator.java
index 88657a5..77db9fc 100644
--- a/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/JavaGenerator.java
+++ b/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/JavaGenerator.java
@@ -26,12 +26,12 @@
 
 package gov.nist.secauto.metaschema.codegen;
 
-import com.sun.xml.bind.api.impl.NameConverter;
-
 import gov.nist.secauto.metaschema.binding.model.annotations.XmlNs;
 import gov.nist.secauto.metaschema.binding.model.annotations.XmlNsForm;
 import gov.nist.secauto.metaschema.binding.model.annotations.XmlSchema;
-import gov.nist.secauto.metaschema.codegen.type.JavaType;
+import gov.nist.secauto.metaschema.codegen.binding.config.BindingConfiguration;
+import gov.nist.secauto.metaschema.codegen.binding.config.DefaultBindingConfiguration;
+import gov.nist.secauto.metaschema.codegen.binding.config.JavaTypeSupplier;
 import gov.nist.secauto.metaschema.model.Metaschema;
 import gov.nist.secauto.metaschema.model.MetaschemaException;
 import gov.nist.secauto.metaschema.model.MetaschemaLoader;
@@ -39,7 +39,6 @@ import gov.nist.secauto.metaschema.model.info.Type;
 import gov.nist.secauto.metaschema.model.info.definitions.AssemblyDefinition;
 import gov.nist.secauto.metaschema.model.info.definitions.FieldDefinition;
 import gov.nist.secauto.metaschema.model.info.definitions.InfoElementDefinition;
-import gov.nist.secauto.metaschema.model.info.definitions.ManagedObject;
 
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -67,26 +66,31 @@ public class JavaGenerator {
     File metaschemaFile = new File("target/src/metaschema/oscal_catalog_metaschema.xml");
     Metaschema metaschema = new MetaschemaLoader().loadXmlMetaschema(metaschemaFile);
 
-    JavaGenerator.generate(metaschema, new File(args[0]));
+    DefaultBindingConfiguration bindingConfiguration = new DefaultBindingConfiguration();
+    JavaGenerator.generate(metaschema, new File(args[0]), bindingConfiguration);
   }
 
   private JavaGenerator() {
     // disable construction
   }
 
-  public static Map<Metaschema, List<GeneratedClass>> generate(Metaschema metaschema, File dir) throws IOException {
-    return generate(Collections.singletonList(metaschema), dir);
+  public static Map<Metaschema, List<GeneratedClass>> generate(Metaschema metaschema, File generationTargetDirectory,
+      BindingConfiguration bindingConfiguration) throws IOException {
+    return generate(Collections.singletonList(metaschema), generationTargetDirectory, bindingConfiguration);
   }
 
-  public static Map<Metaschema, List<GeneratedClass>> generate(Collection<? extends Metaschema> metaschemas, File dir)
-      throws IOException {
-    logger.info("Generating Java classes in: {}", dir.getPath());
+  public static Map<Metaschema, List<GeneratedClass>> generate(Collection<? extends Metaschema> metaschemas,
+      File generationTargetDirectory, BindingConfiguration bindingConfiguration) throws IOException {
+    Objects.requireNonNull(metaschemas, "metaschemas");
+    Objects.requireNonNull(generationTargetDirectory, "generationTargetDirectory");
+    Objects.requireNonNull(bindingConfiguration, "bindingConfiguration");
+    logger.info("Generating Java classes in: {}", generationTargetDirectory.getPath());
 
     Map<Metaschema, List<GeneratedClass>> retval = new HashMap<>();
     Map<URI, String> xmlNamespaceToPackageNameMap = new HashMap<>();
     Map<URI, Set<Metaschema>> xmlNamespaceToMetaschemaMap = new HashMap<>();
 
-    DeconflictingJavaTypeSupplier javaTypeSupplier = new DeconflictingJavaTypeSupplier();
+    JavaTypeSupplier javaTypeSupplier = bindingConfiguration.getJavaTypeSupplier();
 
     Map<Metaschema, List<InfoElementDefinition>> metaschemaToInformationElementsMap = buildMetaschemaMap(metaschemas);
     for (Map.Entry<Metaschema, List<InfoElementDefinition>> entry : metaschemaToInformationElementsMap.entrySet()) {
@@ -111,7 +115,7 @@ public class JavaGenerator {
         }
 
         if (classGenerator != null) {
-          GeneratedClass generatedClass = classGenerator.generateClass(dir);
+          GeneratedClass generatedClass = classGenerator.generateClass(generationTargetDirectory);
           String className = generatedClass.getClassName();
           if (classNames.contains(className)) {
             throw new IllegalStateException(String.format(
@@ -132,7 +136,7 @@ public class JavaGenerator {
       }
 
       URI xmlNamespace = metaschema.getXmlNamespace();
-      String packageName = metaschema.getPackageName();
+      String packageName = bindingConfiguration.getPackageName(metaschema);
 
       if (xmlNamespaceToPackageNameMap.containsKey(xmlNamespace)) {
         String assignedPackage = xmlNamespaceToPackageNameMap.get(xmlNamespace);
@@ -141,7 +145,7 @@ public class JavaGenerator {
               "The metaschema '%s' is assigning the new package name '%s'."
                   + " This new name is different than the previously assigned package name '%s' for the same namespace."
                   + " A metaschema namespace must be assigned a consistent package name.",
-              metaschema.getLocation().toString(), metaschema.getPackageName(), assignedPackage));
+              metaschema.getLocation().toString(), packageName, assignedPackage));
         }
       } else {
         xmlNamespaceToPackageNameMap.put(xmlNamespace, packageName);
@@ -158,7 +162,7 @@ public class JavaGenerator {
     for (Map.Entry<URI, String> entry : xmlNamespaceToPackageNameMap.entrySet()) {
       String packageName = entry.getValue();
       String packagePath = packageName.replace(".", "/");
-      File packageInfo = new File(dir, packagePath + "/package-info.java");
+      File packageInfo = new File(generationTargetDirectory, packagePath + "/package-info.java");
       URI namespace = entry.getKey();
       String namespaceString = namespace.toString();
 
@@ -226,44 +230,4 @@ public class JavaGenerator {
       return rootClass;
     }
   }
-
-  private static class DeconflictingJavaTypeSupplier implements JavaTypeSupplier {
-    private final Map<String, Set<String>> packageToClassNamesMap = new HashMap<>();
-    private final Map<ManagedObject, JavaType> definitionToTypeMap = new HashMap<>();
-
-    @Override
-    public JavaType getClassJavaType(ManagedObject definition) {
-      JavaType retval = definitionToTypeMap.get(definition);
-      if (retval == null) {
-        String packageName = definition.getPackageName();
-        String className = definition.getClassName();
-
-        Set<String> classNames = packageToClassNamesMap.get(packageName);
-        if (classNames == null) {
-          classNames = new HashSet<>();
-          packageToClassNamesMap.put(packageName, classNames);
-        }
-
-        if (classNames.contains(className)) {
-          logger.warn(String.format("Class name '%s' in metaschema '%s' conflicts with a previously used class name.",
-              className, definition.getContainingMetaschema().getLocation()));
-          // first try to append the metaschema's short name
-          String metaschemaShortName = definition.getContainingMetaschema().getShortName();
-          className = NameConverter.standard.toClassName(className + metaschemaShortName);
-        }
-
-        String classNameBase = className;
-        int index = 1;
-        while (classNames.contains(className)) {
-          className = classNameBase + Integer.toString(index);
-        }
-        classNames.add(className);
-
-        retval = JavaType.create(packageName, className);
-        definitionToTypeMap.put(definition, retval);
-      }
-      return retval;
-    }
-
-  }
 }
diff --git a/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/binding/config/BindingConfiguration.java b/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/binding/config/BindingConfiguration.java
new file mode 100644
index 0000000..2553b46
--- /dev/null
+++ b/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/binding/config/BindingConfiguration.java
@@ -0,0 +1,39 @@
+/**
+ * Portions of this software was developed by employees of the National Institute
+ * of Standards and Technology (NIST), an agency of the Federal Government and is
+ * being made available as a public service. Pursuant to title 17 United States
+ * Code Section 105, works of NIST employees are not subject to copyright
+ * protection in the United States. This software may be subject to foreign
+ * copyright. Permission in the United States and in foreign countries, to the
+ * extent that NIST may hold copyright, to use, copy, modify, create derivative
+ * works, and distribute this software and its documentation without fee is hereby
+ * granted on a non-exclusive basis, provided that this notice and disclaimer
+ * of warranty appears in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED 'AS IS' WITHOUT ANY WARRANTY OF ANY KIND, EITHER
+ * EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY
+ * THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND FREEDOM FROM
+ * INFRINGEMENT, AND ANY WARRANTY THAT THE DOCUMENTATION WILL CONFORM TO THE
+ * SOFTWARE, OR ANY WARRANTY THAT THE SOFTWARE WILL BE ERROR FREE.  IN NO EVENT
+ * SHALL NIST BE LIABLE FOR ANY DAMAGES, INCLUDING, BUT NOT LIMITED TO, DIRECT,
+ * INDIRECT, SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM,
+ * OR IN ANY WAY CONNECTED WITH THIS SOFTWARE, WHETHER OR NOT BASED UPON WARRANTY,
+ * CONTRACT, TORT, OR OTHERWISE, WHETHER OR NOT INJURY WAS SUSTAINED BY PERSONS OR
+ * PROPERTY OR OTHERWISE, AND WHETHER OR NOT LOSS WAS SUSTAINED FROM, OR AROSE OUT
+ * OF THE RESULTS OF, OR USE OF, THE SOFTWARE OR SERVICES PROVIDED HEREUNDER.
+ */
+
+package gov.nist.secauto.metaschema.codegen.binding.config;
+
+import gov.nist.secauto.metaschema.model.Metaschema;
+import gov.nist.secauto.metaschema.model.info.definitions.ManagedObject;
+
+public interface BindingConfiguration {
+
+  String getPackageName(Metaschema metaschema);
+
+  String getClassName(ManagedObject definition);
+
+  JavaTypeSupplier getJavaTypeSupplier();
+}
diff --git a/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/binding/config/DeconflictingJavaTypeSupplier.java b/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/binding/config/DeconflictingJavaTypeSupplier.java
new file mode 100644
index 0000000..71b8fcb
--- /dev/null
+++ b/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/binding/config/DeconflictingJavaTypeSupplier.java
@@ -0,0 +1,88 @@
+/**
+ * Portions of this software was developed by employees of the National Institute
+ * of Standards and Technology (NIST), an agency of the Federal Government and is
+ * being made available as a public service. Pursuant to title 17 United States
+ * Code Section 105, works of NIST employees are not subject to copyright
+ * protection in the United States. This software may be subject to foreign
+ * copyright. Permission in the United States and in foreign countries, to the
+ * extent that NIST may hold copyright, to use, copy, modify, create derivative
+ * works, and distribute this software and its documentation without fee is hereby
+ * granted on a non-exclusive basis, provided that this notice and disclaimer
+ * of warranty appears in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED 'AS IS' WITHOUT ANY WARRANTY OF ANY KIND, EITHER
+ * EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY
+ * THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND FREEDOM FROM
+ * INFRINGEMENT, AND ANY WARRANTY THAT THE DOCUMENTATION WILL CONFORM TO THE
+ * SOFTWARE, OR ANY WARRANTY THAT THE SOFTWARE WILL BE ERROR FREE.  IN NO EVENT
+ * SHALL NIST BE LIABLE FOR ANY DAMAGES, INCLUDING, BUT NOT LIMITED TO, DIRECT,
+ * INDIRECT, SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM,
+ * OR IN ANY WAY CONNECTED WITH THIS SOFTWARE, WHETHER OR NOT BASED UPON WARRANTY,
+ * CONTRACT, TORT, OR OTHERWISE, WHETHER OR NOT INJURY WAS SUSTAINED BY PERSONS OR
+ * PROPERTY OR OTHERWISE, AND WHETHER OR NOT LOSS WAS SUSTAINED FROM, OR AROSE OUT
+ * OF THE RESULTS OF, OR USE OF, THE SOFTWARE OR SERVICES PROVIDED HEREUNDER.
+ */
+
+package gov.nist.secauto.metaschema.codegen.binding.config;
+
+import com.sun.xml.bind.api.impl.NameConverter;
+
+import gov.nist.secauto.metaschema.codegen.type.JavaType;
+import gov.nist.secauto.metaschema.model.info.definitions.ManagedObject;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+
+class DeconflictingJavaTypeSupplier implements JavaTypeSupplier {
+  private static final Logger logger = LogManager.getLogger(DeconflictingJavaTypeSupplier.class);
+
+  private final Map<String, Set<String>> packageToClassNamesMap = new HashMap<>();
+  private final Map<ManagedObject, JavaType> definitionToTypeMap = new HashMap<>();
+
+  private final BindingConfiguration bindingConfiguration;
+
+  public DeconflictingJavaTypeSupplier(BindingConfiguration bindingConfiguration) {
+    this.bindingConfiguration = bindingConfiguration;
+  }
+
+  @Override
+  public JavaType getClassJavaType(ManagedObject managedObject) {
+    JavaType retval = definitionToTypeMap.get(managedObject);
+    if (retval == null) {
+      String packageName = bindingConfiguration.getPackageName(managedObject.getContainingMetaschema());
+      String className = bindingConfiguration.getClassName(managedObject);
+
+      Set<String> classNames = packageToClassNamesMap.get(packageName);
+      if (classNames == null) {
+        classNames = new HashSet<>();
+        packageToClassNamesMap.put(packageName, classNames);
+      }
+
+      if (classNames.contains(className)) {
+        logger.warn(String.format("Class name '%s' in metaschema '%s' conflicts with a previously used class name.",
+            className, managedObject.getContainingMetaschema().getLocation()));
+        // first try to append the metaschema's short name
+        String metaschemaShortName = managedObject.getContainingMetaschema().getShortName();
+        className = NameConverter.standard.toClassName(className + metaschemaShortName);
+      }
+
+      String classNameBase = className;
+      int index = 1;
+      while (classNames.contains(className)) {
+        className = classNameBase + Integer.toString(index);
+      }
+      classNames.add(className);
+
+      retval = JavaType.create(packageName, className);
+      definitionToTypeMap.put(managedObject, retval);
+    }
+    return retval;
+  }
+
+}
diff --git a/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/binding/config/DefaultBindingConfiguration.java b/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/binding/config/DefaultBindingConfiguration.java
new file mode 100644
index 0000000..0ef06ea
--- /dev/null
+++ b/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/binding/config/DefaultBindingConfiguration.java
@@ -0,0 +1,229 @@
+/**
+ * Portions of this software was developed by employees of the National Institute
+ * of Standards and Technology (NIST), an agency of the Federal Government and is
+ * being made available as a public service. Pursuant to title 17 United States
+ * Code Section 105, works of NIST employees are not subject to copyright
+ * protection in the United States. This software may be subject to foreign
+ * copyright. Permission in the United States and in foreign countries, to the
+ * extent that NIST may hold copyright, to use, copy, modify, create derivative
+ * works, and distribute this software and its documentation without fee is hereby
+ * granted on a non-exclusive basis, provided that this notice and disclaimer
+ * of warranty appears in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED 'AS IS' WITHOUT ANY WARRANTY OF ANY KIND, EITHER
+ * EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY
+ * THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND FREEDOM FROM
+ * INFRINGEMENT, AND ANY WARRANTY THAT THE DOCUMENTATION WILL CONFORM TO THE
+ * SOFTWARE, OR ANY WARRANTY THAT THE SOFTWARE WILL BE ERROR FREE.  IN NO EVENT
+ * SHALL NIST BE LIABLE FOR ANY DAMAGES, INCLUDING, BUT NOT LIMITED TO, DIRECT,
+ * INDIRECT, SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM,
+ * OR IN ANY WAY CONNECTED WITH THIS SOFTWARE, WHETHER OR NOT BASED UPON WARRANTY,
+ * CONTRACT, TORT, OR OTHERWISE, WHETHER OR NOT INJURY WAS SUSTAINED BY PERSONS OR
+ * PROPERTY OR OTHERWISE, AND WHETHER OR NOT LOSS WAS SUSTAINED FROM, OR AROSE OUT
+ * OF THE RESULTS OF, OR USE OF, THE SOFTWARE OR SERVICES PROVIDED HEREUNDER.
+ */
+
+package gov.nist.secauto.metaschema.codegen.binding.config;
+
+import com.sun.xml.bind.api.impl.NameConverter;
+
+import gov.nist.csrc.ns.metaschemaBinding.x10.JavaManagedObjectBindingType;
+import gov.nist.csrc.ns.metaschemaBinding.x10.JavaModelBindingType;
+import gov.nist.csrc.ns.metaschemaBinding.x10.ManagedObjectBindingType;
+import gov.nist.csrc.ns.metaschemaBinding.x10.MetaschemaBindingType;
+import gov.nist.csrc.ns.metaschemaBinding.x10.MetaschemaBindingsDocument;
+import gov.nist.csrc.ns.metaschemaBinding.x10.MetaschemaBindingsType;
+import gov.nist.csrc.ns.metaschemaBinding.x10.ModelBindingType;
+import gov.nist.secauto.metaschema.model.Metaschema;
+import gov.nist.secauto.metaschema.model.MetaschemaException;
+import gov.nist.secauto.metaschema.model.info.definitions.ManagedObject;
+
+import org.apache.xmlbeans.XmlException;
+
+import java.io.File;
+import java.io.IOException;
+import java.net.MalformedURLException;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.net.URL;
+import java.util.HashMap;
+import java.util.Map;
+
+public class DefaultBindingConfiguration implements BindingConfiguration {
+  private Map<String, String> namespaceToPackageNameMap = new HashMap<>();
+  private Map<String, Map<String, MutableManagedObjectBindingConfiguration>> metaschemaUrlToManagedObjectMap
+      = new HashMap<>();
+
+  public DefaultBindingConfiguration() {
+
+  }
+
+  @Override
+  public String getPackageName(Metaschema metaschema) {
+    URI namespace = metaschema.getXmlNamespace();
+
+    String packageName = getPackageNameForNamespace(namespace.toASCIIString());
+    if (packageName == null) {
+      packageName = NameConverter.standard.toPackageName(namespace.toString());
+    }
+    return packageName;
+  }
+
+  @Override
+  public String getClassName(ManagedObject managedObject) {
+    String retval = null;
+
+    ManagedObjectBindingConfiguration managedObjectBinding = getManagedObjectConfig(
+        managedObject.getContainingMetaschema().getLocation().toString(), managedObject.getName());
+    if (managedObjectBinding != null) {
+      retval = managedObjectBinding.getClassName();
+    }
+
+    if (retval == null) {
+      retval = NameConverter.standard.toClassName(managedObject.getName());
+    }
+    return retval;
+  }
+
+  public void addModelBindingConfig(String namespace, String packageName) {
+    if (namespaceToPackageNameMap.containsKey(namespace)) {
+      String oldPackageName = namespaceToPackageNameMap.get(namespace);
+      if (!oldPackageName.equals(packageName)) {
+        throw new IllegalStateException(
+            String.format("Attempt to redefine existing package name '%s' to '%s' for namespace '%s'", oldPackageName,
+                packageName, namespace));
+      }
+    } else {
+      namespaceToPackageNameMap.put(namespace, packageName);
+    }
+  }
+
+  protected String getPackageNameForNamespace(String namespace) {
+    return namespaceToPackageNameMap.get(namespace);
+  }
+
+  public void addMManagedObjectBindingConfig(String metaschemaUri, String name,
+      MutableManagedObjectBindingConfiguration managedObjectConfig) {
+
+    Map<String, MutableManagedObjectBindingConfiguration> metaschemaConfigs
+        = metaschemaUrlToManagedObjectMap.get(metaschemaUri);
+    if (metaschemaConfigs == null) {
+      metaschemaConfigs = new HashMap<>();
+      metaschemaUrlToManagedObjectMap.put(metaschemaUri, metaschemaConfigs);
+    }
+
+    if (metaschemaConfigs.containsKey(name)) {
+      throw new IllegalStateException(String.format(
+          "Attempt to add an already existing binding configuration set for managed object '%s' in metaschema %s'.",
+          name, metaschemaUri));
+    }
+    metaschemaConfigs.put(name, managedObjectConfig);
+  }
+
+  public MutableManagedObjectBindingConfiguration getManagedObjectConfig(String metaschemaUrl, String name) {
+    Map<String, MutableManagedObjectBindingConfiguration> metaschemaConfigs
+        = metaschemaUrlToManagedObjectMap.get(metaschemaUrl);
+
+    MutableManagedObjectBindingConfiguration retval = null;
+    if (metaschemaConfigs != null) {
+      retval = metaschemaConfigs.get(name);
+    }
+    return retval;
+  }
+
+  @Override
+  public JavaTypeSupplier getJavaTypeSupplier() {
+    return new DeconflictingJavaTypeSupplier(this);
+  }
+
+  public void load(File file) throws MalformedURLException, IOException, MetaschemaException {
+    URL resource = file.toURI().toURL();
+    load(resource);
+  }
+
+  public void load(URL resource) throws IOException, MetaschemaException {
+    MetaschemaBindingsDocument xml;
+    try {
+      xml = MetaschemaBindingsDocument.Factory.parse(resource);
+    } catch (XmlException ex) {
+      throw new MetaschemaException(ex);
+    }
+
+    MetaschemaBindingsType bindings = xml.getMetaschemaBindings();
+
+    for (ModelBindingType model : bindings.getModelBindingList()) {
+      processModelBindingConfig(model);
+    }
+
+    for (MetaschemaBindingType metaschema : bindings.getMetaschemaBindingList()) {
+      try {
+        processMetaschemaBindingConfig(resource, metaschema);
+      } catch (MalformedURLException | URISyntaxException ex) {
+        throw new MetaschemaException(ex);
+      }
+    }
+  }
+
+  private void processModelBindingConfig(ModelBindingType model) {
+    String namespace = model.getNamespace();
+    
+    if (model.isSetJava()) {
+      JavaModelBindingType java = model.getJava();
+      if (java.isSetUsePackageName()) {
+        addModelBindingConfig(namespace, java.getUsePackageName());
+      }
+    }
+  }
+
+  private void processMetaschemaBindingConfig(URL configResource,
+      MetaschemaBindingType metaschema) throws MalformedURLException, URISyntaxException {
+    String href = metaschema.getHref();
+    URL metaschemaUrl = new URL(configResource, href);
+    String metaschemaUri = metaschemaUrl.toURI().toString();
+
+    for (ManagedObjectBindingType managedObject : metaschema.getDefineAssemblyBindingList()) {
+      processManagedObjectBindingConfig(metaschemaUri, managedObject);
+    }
+
+    for (ManagedObjectBindingType managedObject : metaschema.getDefineFieldBindingList()) {
+      processManagedObjectBindingConfig(metaschemaUri, managedObject);
+    }
+  }
+
+  private void processManagedObjectBindingConfig(String metaschemaUri,
+      ManagedObjectBindingType managedObject) {
+    String name = managedObject.getName();
+
+    MutableManagedObjectBindingConfiguration managedObjectConfig = getManagedObjectConfig(metaschemaUri, name);
+
+    boolean configCreated = false;
+    if (managedObject.isSetJava()) {
+      JavaManagedObjectBindingType java = managedObject.getJava();
+      if (managedObjectConfig == null) {
+        configCreated = true;
+        managedObjectConfig = new DefaultMutableManagedObjectConfiguration();
+      }
+
+      boolean configChanged = false;
+      if (java.isSetUseClassName()) {
+        managedObjectConfig.setClassName(java.getUseClassName());
+        configChanged = true;
+      }
+
+      if (java.isSetExtendBaseClass()) {
+        managedObjectConfig.setQualifiedBaseClassName(java.getExtendBaseClass());
+        configChanged = true;
+      }
+
+      for (String interfaceName : java.getImplementInterfaceList()) {
+        managedObjectConfig.addInterfaceToImplement(interfaceName);
+        configChanged = true;
+      }
+
+      if (configChanged && configCreated) {
+        addMManagedObjectBindingConfig(metaschemaUri, name, managedObjectConfig);
+      }
+    }
+  }
+}
diff --git a/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/configuration/AssemblyBindingConfiguration.java b/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/binding/config/DefaultMutableManagedObjectConfiguration.java
similarity index 60%
rename from java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/configuration/AssemblyBindingConfiguration.java
rename to java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/binding/config/DefaultMutableManagedObjectConfiguration.java
index c78c6f1..bdb055f 100644
--- a/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/configuration/AssemblyBindingConfiguration.java
+++ b/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/binding/config/DefaultMutableManagedObjectConfiguration.java
@@ -24,20 +24,49 @@
  * OF THE RESULTS OF, OR USE OF, THE SOFTWARE OR SERVICES PROVIDED HEREUNDER.
  */
 
-package gov.nist.secauto.metaschema.model.configuration;
+package gov.nist.secauto.metaschema.codegen.binding.config;
 
-import java.util.List;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Set;
 
-public class AssemblyBindingConfiguration extends AbstractManagedObjectBindingConfiguration {
+public class DefaultMutableManagedObjectConfiguration implements MutableManagedObjectBindingConfiguration {
+  private String className;
+  private String baseClassName;
+  private Set<String> interfacesToImplement = new HashSet<>();
 
-  public static final AssemblyBindingConfiguration NULL_CONFIG;
+  public DefaultMutableManagedObjectConfiguration() {
+  }
+
+  @Override
+  public String getClassName() {
+    return className;
+  }
+
+  @Override
+  public void setClassName(String name) {
+    this.className = name;
+  }
+
+  @Override
+  public String getQualifiedBaseClassName() {
+    return baseClassName;
+  }
 
-  static {
-    NULL_CONFIG = new AssemblyBindingConfiguration(null, null, null);
+  @Override
+  public void setQualifiedBaseClassName(String name) {
+    this.baseClassName = name;
   }
 
-  public AssemblyBindingConfiguration(String className, String baseClass, List<String> interfacesToImplement) {
-    super(className, baseClass, interfacesToImplement);
+  @Override
+  public Collection<String> getInterfacesToImplement() {
+    return interfacesToImplement.isEmpty() ? Collections.emptySet()
+        : Collections.unmodifiableCollection(interfacesToImplement);
   }
 
+  @Override
+  public void addInterfaceToImplement(String interfaceName) {
+    this.interfacesToImplement.add(interfaceName);
+  }
 }
diff --git a/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/JavaTypeSupplier.java b/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/binding/config/JavaTypeSupplier.java
similarity index 88%
rename from java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/JavaTypeSupplier.java
rename to java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/binding/config/JavaTypeSupplier.java
index 19faf7f..418893c 100644
--- a/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/JavaTypeSupplier.java
+++ b/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/binding/config/JavaTypeSupplier.java
@@ -24,13 +24,11 @@
  * OF THE RESULTS OF, OR USE OF, THE SOFTWARE OR SERVICES PROVIDED HEREUNDER.
  */
 
-package gov.nist.secauto.metaschema.codegen;
+package gov.nist.secauto.metaschema.codegen.binding.config;
 
 import gov.nist.secauto.metaschema.codegen.type.JavaType;
-import gov.nist.secauto.metaschema.model.info.definitions.InfoElementDefinition;
 import gov.nist.secauto.metaschema.model.info.definitions.ManagedObject;
 
 public interface JavaTypeSupplier {
-  JavaType getClassJavaType(ManagedObject definition);
-  // JavaType getJavaType(InfoElementDefinition definition);
+  JavaType getClassJavaType(ManagedObject managedObject);
 }
diff --git a/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/configuration/ManagedObjectBingingConfiguration.java b/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/binding/config/ManagedObjectBindingConfiguration.java
similarity index 89%
rename from java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/configuration/ManagedObjectBingingConfiguration.java
rename to java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/binding/config/ManagedObjectBindingConfiguration.java
index 463d81f..9e543ad 100644
--- a/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/configuration/ManagedObjectBingingConfiguration.java
+++ b/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/binding/config/ManagedObjectBindingConfiguration.java
@@ -24,14 +24,14 @@
  * OF THE RESULTS OF, OR USE OF, THE SOFTWARE OR SERVICES PROVIDED HEREUNDER.
  */
 
-package gov.nist.secauto.metaschema.model.configuration;
+package gov.nist.secauto.metaschema.codegen.binding.config;
 
-import java.util.List;
+import java.util.Collection;
 
-public interface ManagedObjectBingingConfiguration extends BindingConfiguration {
+public interface ManagedObjectBindingConfiguration {
   String getClassName();
 
   String getQualifiedBaseClassName();
 
-  List<String> getInterfacesToImplement();
+  Collection<String> getInterfacesToImplement();
 }
diff --git a/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/configuration/ModelBindingConfiguration.java b/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/binding/config/ModelBindingConfiguration.java
similarity index 94%
rename from java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/configuration/ModelBindingConfiguration.java
rename to java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/binding/config/ModelBindingConfiguration.java
index 5a6ec19..2beaa03 100644
--- a/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/configuration/ModelBindingConfiguration.java
+++ b/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/binding/config/ModelBindingConfiguration.java
@@ -24,9 +24,9 @@
  * OF THE RESULTS OF, OR USE OF, THE SOFTWARE OR SERVICES PROVIDED HEREUNDER.
  */
 
-package gov.nist.secauto.metaschema.model.configuration;
+package gov.nist.secauto.metaschema.codegen.binding.config;
 
-public class ModelBindingConfiguration implements BindingConfiguration {
+public class ModelBindingConfiguration {
 
   public static final ModelBindingConfiguration NULL_CONFIG;
 
diff --git a/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/configuration/BindingConfiguration.java b/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/binding/config/MutableManagedObjectBindingConfiguration.java
similarity index 85%
rename from java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/configuration/BindingConfiguration.java
rename to java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/binding/config/MutableManagedObjectBindingConfiguration.java
index 0936508..597153b 100644
--- a/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/configuration/BindingConfiguration.java
+++ b/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/binding/config/MutableManagedObjectBindingConfiguration.java
@@ -24,7 +24,13 @@
  * OF THE RESULTS OF, OR USE OF, THE SOFTWARE OR SERVICES PROVIDED HEREUNDER.
  */
 
-package gov.nist.secauto.metaschema.model.configuration;
+package gov.nist.secauto.metaschema.codegen.binding.config;
+
+public interface MutableManagedObjectBindingConfiguration extends ManagedObjectBindingConfiguration {
+  void setClassName(String name);
+
+  void setQualifiedBaseClassName(String name);
+
+  void addInterfaceToImplement(String name);
 
-public interface BindingConfiguration {
 }
diff --git a/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/builder/AbstractMethodBuilder.java b/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/builder/AbstractMethodBuilder.java
index 913c9dc..b9e58e5 100644
--- a/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/builder/AbstractMethodBuilder.java
+++ b/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/builder/AbstractMethodBuilder.java
@@ -28,7 +28,6 @@ package gov.nist.secauto.metaschema.codegen.builder;
 
 import java.io.PrintWriter;
 import java.io.StringWriter;
-import java.util.stream.Collectors;
 
 public abstract class AbstractMethodBuilder<T extends AbstractMethodBuilder<T>> extends AbstractMemberBuilder<T> {
   private String arguments;
diff --git a/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/type/JavaType.java b/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/type/JavaType.java
index c80a3cf..e41a340 100644
--- a/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/type/JavaType.java
+++ b/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/type/JavaType.java
@@ -26,8 +26,6 @@
 
 package gov.nist.secauto.metaschema.codegen.type;
 
-import gov.nist.secauto.metaschema.model.info.definitions.ManagedObject;
-
 import java.util.Set;
 import java.util.function.Function;
 
@@ -109,10 +107,6 @@ public interface JavaType {
     return new SimpleJavaType(packageName, className);
   }
 
-  public static JavaType create(ManagedObject obj) {
-    return new SimpleJavaType(obj);
-  }
-
   public static ListJavaType createGenericList(Class<?> valueClass) {
     return new ListJavaType(create(valueClass));
   }
diff --git a/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/type/SimpleJavaType.java b/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/type/SimpleJavaType.java
index fdaecde..255108c 100644
--- a/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/type/SimpleJavaType.java
+++ b/java/metaschema-java-codegen/src/main/java/gov/nist/secauto/metaschema/codegen/type/SimpleJavaType.java
@@ -26,8 +26,6 @@
 
 package gov.nist.secauto.metaschema.codegen.type;
 
-import gov.nist.secauto.metaschema.model.info.definitions.ManagedObject;
-
 import java.util.Objects;
 
 public class SimpleJavaType extends AbstractJavaType {
@@ -43,10 +41,6 @@ public class SimpleJavaType extends AbstractJavaType {
     this.qualifiedClassName = packageName + "." + className;
   }
 
-  SimpleJavaType(ManagedObject obj) {
-    this(obj.getPackageName(), obj.getClassName());
-  }
-
   @Override
   public String getClassName() {
     return className;
diff --git a/java/metaschema-java-codegen/src/main/metaschema-bindings/oscal-metaschema-bindings.xml b/java/metaschema-java-codegen/src/main/metaschema-bindings/oscal-metaschema-bindings.xml
new file mode 100644
index 0000000..e5baed9
--- /dev/null
+++ b/java/metaschema-java-codegen/src/main/metaschema-bindings/oscal-metaschema-bindings.xml
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<metaschema-bindings xmlns="https://csrc.nist.gov/ns/metaschema-binding/1.0"
+    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:schemaLocation="https://csrc.nist.gov/ns/metaschema-binding/1.0 ../xsd/metaschema-binding.xsd">
+    <model-binding namespace="http://csrc.nist.gov/ns/oscal/1.0">
+        <java>
+            <use-package-name>gov.nist.secauto.oscal.lib</use-package-name>
+        </java>
+    </model-binding>
+    <metaschema-binding href="../../../target/download/metaschema/oscal_component_metaschema.xml">
+        <define-assembly-binding name="component">
+            <java>
+                <use-class-name>ComponentData</use-class-name>
+                <implement-interface>gov.nist.int</implement-interface>
+            </java>
+        </define-assembly-binding>
+        <define-assembly-binding name="implemented-requirement">
+            <java>
+                <use-class-name>ImplementedRequirementByComponent</use-class-name>
+            </java>
+        </define-assembly-binding>
+    </metaschema-binding>
+    <metaschema-binding href="../../../target/download/metaschema/oscal_profile_metaschema.xml">
+        <define-assembly-binding name="set-parameter">
+            <java>
+                <use-class-name>ProfiledSetParameter</use-class-name>
+            </java>
+        </define-assembly-binding>
+    </metaschema-binding>
+</metaschema-bindings>
\ No newline at end of file
diff --git a/java/metaschema-java-codegen/src/main/xsd/metaschema-binding.xsd b/java/metaschema-java-codegen/src/main/xsd/metaschema-binding.xsd
index 8a80b07..c30d6e1 100644
--- a/java/metaschema-java-codegen/src/main/xsd/metaschema-binding.xsd
+++ b/java/metaschema-java-codegen/src/main/xsd/metaschema-binding.xsd
@@ -31,17 +31,17 @@
           <xs:documentation>Defines a binding for a given metaschema identified by a URL.</xs:documentation>
         </xs:annotation>
         <xs:unique name="UniqueManagedObjects">
-          <xs:selector xpath="b:define-assembly-binding|b:define-field-binding"></xs:selector>
-          <xs:field xpath="@name"></xs:field>
+          <xs:selector xpath="b:define-assembly-binding | b:define-field-binding"/>
+          <xs:field xpath="@name"/>
         </xs:unique>
         <xs:unique name="UniqueManagedObjectJavaClassNames">
-          <xs:selector xpath="b:define-assembly-binding/b:java|b:define-field-binding/b:java"></xs:selector>
-          <xs:field xpath="b:use-class-name"></xs:field>
+          <xs:selector xpath="b:define-assembly-binding/b:java | b:define-field-binding/b:java"/>
+          <xs:field xpath="b:use-class-name"/>
         </xs:unique>
       </xs:element>
     </xs:sequence>
   </xs:complexType>
-  
+
   <xs:complexType name="ModelBindingType">
     <xs:sequence>
       <xs:element name="java" type="b:JavaModelBindingType" minOccurs="0"> </xs:element>
@@ -52,7 +52,7 @@
       </xs:annotation>
     </xs:attribute>
   </xs:complexType>
-  
+
   <xs:complexType name="MetaschemaBindingType">
     <xs:annotation>
       <xs:documentation>Defines a binding for a given metaschema identified by a relative URL.</xs:documentation>
@@ -91,12 +91,12 @@
           <xs:documentation>Field and assembly binding configurations for Java bound classes.</xs:documentation>
         </xs:annotation>
         <xs:unique name="UniqueInterfaces">
-          <xs:selector xpath="b:implement-interface"></xs:selector>
-          <xs:field xpath="."></xs:field>
+          <xs:selector xpath="b:implement-interface"/>
+          <xs:field xpath="."/>
         </xs:unique>
       </xs:element>
     </xs:sequence>
-    <xs:attribute name="name" type="xs:NCName">
+    <xs:attribute name="name" type="xs:NCName" use="required">
       <xs:annotation>
         <xs:documentation>The name of the metaschema field or assembly.</xs:documentation>
       </xs:annotation>
diff --git a/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/configuration/FieldBindingConfiguration.java b/java/metaschema-java-codegen/src/test/java/gov/nist/secauto/metaschema/codegen/binding/config/BindingConfigurationLoaderTest.java
similarity index 72%
rename from java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/configuration/FieldBindingConfiguration.java
rename to java/metaschema-java-codegen/src/test/java/gov/nist/secauto/metaschema/codegen/binding/config/BindingConfigurationLoaderTest.java
index 8a99a20..6e14536 100644
--- a/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/configuration/FieldBindingConfiguration.java
+++ b/java/metaschema-java-codegen/src/test/java/gov/nist/secauto/metaschema/codegen/binding/config/BindingConfigurationLoaderTest.java
@@ -24,20 +24,26 @@
  * OF THE RESULTS OF, OR USE OF, THE SOFTWARE OR SERVICES PROVIDED HEREUNDER.
  */
 
-package gov.nist.secauto.metaschema.model.configuration;
+package gov.nist.secauto.metaschema.codegen.binding.config;
 
-import java.util.List;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
 
-public class FieldBindingConfiguration extends AbstractManagedObjectBindingConfiguration {
+import gov.nist.secauto.metaschema.model.MetaschemaException;
 
-  public static final FieldBindingConfiguration NULL_CONFIG;
+import org.junit.jupiter.api.Test;
 
-  static {
-    NULL_CONFIG = new FieldBindingConfiguration(null, null, null);
-  }
+import java.io.File;
+import java.io.IOException;
+import java.net.MalformedURLException;
+
+class BindingConfigurationLoaderTest {
 
-  public FieldBindingConfiguration(String className, String baseClass, List<String> interfacesToImplement) {
-    super(className, baseClass, interfacesToImplement);
+  @Test
+  void test() throws MalformedURLException, IOException, MetaschemaException {
+    File configFile = new File("src/main/metaschema-bindings/oscal-metaschema-bindings.xml");
+    DefaultBindingConfiguration config = new DefaultBindingConfiguration();
+    config.load(configFile);
+    assertNotNull(config);
   }
 
 }
diff --git a/java/metaschema-java-codegen/src/test/java/gov/nist/secauto/metaschema/codegen/test/TestBasicMetaschema.java b/java/metaschema-java-codegen/src/test/java/gov/nist/secauto/metaschema/codegen/test/TestBasicMetaschema.java
index ce97291..dbdd928 100644
--- a/java/metaschema-java-codegen/src/test/java/gov/nist/secauto/metaschema/codegen/test/TestBasicMetaschema.java
+++ b/java/metaschema-java-codegen/src/test/java/gov/nist/secauto/metaschema/codegen/test/TestBasicMetaschema.java
@@ -35,6 +35,7 @@ import gov.nist.secauto.metaschema.binding.Format;
 import gov.nist.secauto.metaschema.binding.io.Feature;
 import gov.nist.secauto.metaschema.binding.io.MutableConfiguration;
 import gov.nist.secauto.metaschema.codegen.JavaGenerator;
+import gov.nist.secauto.metaschema.codegen.binding.config.DefaultBindingConfiguration;
 import gov.nist.secauto.metaschema.model.Metaschema;
 import gov.nist.secauto.metaschema.model.MetaschemaException;
 import gov.nist.secauto.metaschema.model.MetaschemaLoader;
@@ -78,8 +79,10 @@ public class TestBasicMetaschema {
 
     String rootClassName = null;
 
+    DefaultBindingConfiguration bindingConfiguration = new DefaultBindingConfiguration();
     List<JavaGenerator.GeneratedClass> classesToCompile = new LinkedList<>();
-    for (Map.Entry<Metaschema, List<JavaGenerator.GeneratedClass>> entry : JavaGenerator.generate(metaschema, classDir)
+    for (Map.Entry<Metaschema, List<JavaGenerator.GeneratedClass>> entry : JavaGenerator
+        .generate(metaschema, classDir, bindingConfiguration)
         .entrySet()) {
       Metaschema containingMetaschema = entry.getKey();
       for (JavaGenerator.GeneratedClass generatedClass : entry.getValue()) {
@@ -106,20 +109,20 @@ public class TestBasicMetaschema {
     // return new TestDynamicClassLoader(classDir).loadClass(rootClassName);
   }
 
-  private static Object readXml(Reader reader, Class<?> rootClass) throws IOException, BindingException {
+  private static Object readXml(Reader reader, Class<?> rootClass) throws BindingException {
     BindingContext context = BindingContext.newInstance();
     Object value = context.newDeserializer(Format.XML, rootClass, null).deserialize(reader);
     return value;
   }
 
-  private static <CLASS> void writeXml(Writer writer, CLASS rootObject) throws IOException, BindingException {
+  private static <CLASS> void writeXml(Writer writer, CLASS rootObject) throws BindingException {
     BindingContext context = BindingContext.newInstance();
     @SuppressWarnings("unchecked")
     Class<CLASS> clazz = (Class<CLASS>) rootObject.getClass();
     context.newSerializer(Format.XML, clazz, null).serialize(rootObject, writer);
   }
 
-  private static String writeXml(Object rootObject) throws IOException, BindingException {
+  private static String writeXml(Object rootObject) throws BindingException {
     StringWriter writer = new StringWriter();
     writeXml(writer, rootObject);
     return writer.toString();
@@ -133,7 +136,7 @@ public class TestBasicMetaschema {
         .deserialize(reader);
   }
 
-  private static <CLASS> void writeJson(Writer writer, CLASS rootObject) throws IOException, BindingException {
+  private static <CLASS> void writeJson(Writer writer, CLASS rootObject) throws BindingException {
     BindingContext context = BindingContext.newInstance();
     @SuppressWarnings("unchecked")
     Class<CLASS> clazz = (Class<CLASS>) rootObject.getClass();
diff --git a/java/metaschema-java-codegen/src/test/java/gov/nist/secauto/metaschema/codegen/test/TestDynamicClassLoader.java b/java/metaschema-java-codegen/src/test/java/gov/nist/secauto/metaschema/codegen/test/TestDynamicClassLoader.java
index b736202..cce72a6 100644
--- a/java/metaschema-java-codegen/src/test/java/gov/nist/secauto/metaschema/codegen/test/TestDynamicClassLoader.java
+++ b/java/metaschema-java-codegen/src/test/java/gov/nist/secauto/metaschema/codegen/test/TestDynamicClassLoader.java
@@ -26,6 +26,8 @@
 
 package gov.nist.secauto.metaschema.codegen.test;
 
+import net.openhft.compiler.CompilerUtils;
+
 import java.io.File;
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
@@ -34,8 +36,6 @@ import java.nio.file.Path;
 import java.util.Objects;
 import java.util.stream.Stream;
 
-import net.openhft.compiler.CompilerUtils;
-
 public class TestDynamicClassLoader extends ClassLoader {
   private final File classDir;
 
diff --git a/java/metaschema-java-codegen/src/test/java/gov/nist/secauto/metaschema/codegen/test/TestDynamicJavaCompiler.java b/java/metaschema-java-codegen/src/test/java/gov/nist/secauto/metaschema/codegen/test/TestDynamicJavaCompiler.java
index 521aa1e..fbc000b 100644
--- a/java/metaschema-java-codegen/src/test/java/gov/nist/secauto/metaschema/codegen/test/TestDynamicJavaCompiler.java
+++ b/java/metaschema-java-codegen/src/test/java/gov/nist/secauto/metaschema/codegen/test/TestDynamicJavaCompiler.java
@@ -26,6 +26,11 @@
 
 package gov.nist.secauto.metaschema.codegen.test;
 
+import gov.nist.secauto.metaschema.codegen.JavaGenerator;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
 import java.io.File;
 import java.lang.reflect.InvocationTargetException;
 import java.net.MalformedURLException;
@@ -46,11 +51,6 @@ import javax.tools.SimpleJavaFileObject;
 import javax.tools.StandardJavaFileManager;
 import javax.tools.ToolProvider;
 
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-
-import gov.nist.secauto.metaschema.codegen.JavaGenerator;
-
 public class TestDynamicJavaCompiler {
   private static final Logger logger = LogManager.getLogger(TestDynamicJavaCompiler.class);
 
@@ -115,19 +115,6 @@ public class TestDynamicJavaCompiler {
 
   }
 
-  public boolean compileGeneratedClasses(List<JavaGenerator.GeneratedClass> classesToCompile,
-      DiagnosticCollector<JavaFileObject> diagnostics) {
-    JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
-    StandardJavaFileManager fileManager = compiler.getStandardFileManager(diagnostics, null, null);
-
-    List<JavaFileObject> compilationUnits = new ArrayList<>(classesToCompile.size());
-    for (JavaGenerator.GeneratedClass generatedClass : classesToCompile) {
-      compilationUnits.add(fileManager.getJavaFileObjects(generatedClass.getClassFile()).iterator().next());
-    }
-
-    return compile(compiler, fileManager, diagnostics, compilationUnits);
-  }
-
   private boolean compile(JavaCompiler compiler, JavaFileManager fileManager,
       DiagnosticCollector<JavaFileObject> diagnostics, List<JavaFileObject> compilationUnits) {
     List<String> options = new LinkedList<String>();
@@ -155,4 +142,17 @@ public class TestDynamicJavaCompiler {
       return this.content;
     }
   }
+
+  public boolean compileGeneratedClasses(List<JavaGenerator.GeneratedClass> classesToCompile,
+      DiagnosticCollector<JavaFileObject> diagnostics) {
+    JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
+    StandardJavaFileManager fileManager = compiler.getStandardFileManager(diagnostics, null, null);
+
+    List<JavaFileObject> compilationUnits = new ArrayList<>(classesToCompile.size());
+    for (JavaGenerator.GeneratedClass generatedClass : classesToCompile) {
+      compilationUnits.add(fileManager.getJavaFileObjects(generatedClass.getClassFile()).iterator().next());
+    }
+
+    return compile(compiler, fileManager, diagnostics, compilationUnits);
+  }
 }
diff --git a/java/metaschema-maven-plugin/src/main/java/gov/nist/secauto/metaschema/maven/plugin/MetaschemaMojo.java b/java/metaschema-maven-plugin/src/main/java/gov/nist/secauto/metaschema/maven/plugin/MetaschemaMojo.java
index 32ff813..f9ad1e2 100644
--- a/java/metaschema-maven-plugin/src/main/java/gov/nist/secauto/metaschema/maven/plugin/MetaschemaMojo.java
+++ b/java/metaschema-maven-plugin/src/main/java/gov/nist/secauto/metaschema/maven/plugin/MetaschemaMojo.java
@@ -27,26 +27,11 @@
 package gov.nist.secauto.metaschema.maven.plugin;
 
 import gov.nist.secauto.metaschema.codegen.JavaGenerator;
+import gov.nist.secauto.metaschema.codegen.binding.config.DefaultBindingConfiguration;
 import gov.nist.secauto.metaschema.model.Metaschema;
 import gov.nist.secauto.metaschema.model.MetaschemaException;
 import gov.nist.secauto.metaschema.model.MetaschemaLoader;
 
-/*
- * Copyright 2001-2005 The Apache Software Foundation.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
 import org.apache.maven.plugin.AbstractMojo;
 import org.apache.maven.plugin.MojoExecution;
 import org.apache.maven.plugin.MojoExecutionException;
@@ -62,13 +47,14 @@ import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
+import java.util.Arrays;
+import java.util.Collections;
 import java.util.HashSet;
+import java.util.List;
 import java.util.Set;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
-import javax.validation.constraints.NotNull;
-
 /**
  * Goal which generates Java source files for a given set of Metaschema definitions.
  */
@@ -163,6 +149,12 @@ public class MetaschemaMojo extends AbstractMojo {
   @Parameter(property = "metaschema.skip", defaultValue = "false")
   private boolean skip;
 
+  /**
+   * A set of binding configurations
+   */
+  @Parameter
+  protected File[] configs;
+
   /**
    * The BuildContext is used to identify which files or directories were modified since last build.
    * This is used to determine if java code generation must be performed again.
@@ -214,7 +206,7 @@ public class MetaschemaMojo extends AbstractMojo {
    *
    * @return the staleFile
    */
-  protected final @NotNull File getStaleFile() {
+  protected final File getStaleFile() {
     StringBuilder builder = new StringBuilder();
     if (getMojoExecution() != null) {
       builder.append(getMojoExecution().getExecutionId()).append('-');
@@ -265,6 +257,16 @@ public class MetaschemaMojo extends AbstractMojo {
     return Stream.of(ds.getIncludedFiles()).map(filename -> new File(metaschemaDir, filename)).distinct();
   }
 
+  protected List<File> getConfigs() {
+    List<File> retval;
+    if (configs == null) {
+      retval = Collections.emptyList();
+    } else {
+      retval = Arrays.asList(configs);
+    }
+    return retval;
+  }
+
   protected boolean shouldExecutionBeSkipped() {
     return skip;
   }
@@ -290,7 +292,6 @@ public class MetaschemaMojo extends AbstractMojo {
 
   @Override
   public void execute() throws MojoExecutionException {
-    @NotNull
     File staleFile = getStaleFile();
     try {
       staleFile = staleFile.getCanonicalFile();
@@ -332,9 +333,22 @@ public class MetaschemaMojo extends AbstractMojo {
         metaschemaCollection.add(metaschema);
 
       }
+
+      // TODO: load this from the requested file
+      DefaultBindingConfiguration bindingConfiguration = new DefaultBindingConfiguration();
+      for (File config : getConfigs()) {
+        try {
+          getLog().info("Loading binding configuration: " + config.getPath());
+          bindingConfiguration.load(config);
+        } catch (IOException | MetaschemaException ex) {
+          throw new MojoExecutionException(
+              String.format("Unable to load binding configuration from '%s'.", config.getPath()), ex);
+        }
+      }
+
       try {
         getLog().info("Generating Java classes in: " + getOutputDirectory().getPath());
-        JavaGenerator.generate(metaschemaCollection, getOutputDirectory());
+        JavaGenerator.generate(metaschemaCollection, getOutputDirectory(), bindingConfiguration);
       } catch (IOException ex) {
         throw new MojoExecutionException("Creation of Java classes failed.", ex);
       }
diff --git a/java/metaschema-model/.gitignore b/java/metaschema-model/.gitignore
index 24d6437..e656dd0 100644
--- a/java/metaschema-model/.gitignore
+++ b/java/metaschema-model/.gitignore
@@ -1 +1,2 @@
 /target/
+/bin/
diff --git a/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/AbstractMetaschema.java b/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/AbstractMetaschema.java
index fea6cd0..ab3c641 100644
--- a/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/AbstractMetaschema.java
+++ b/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/AbstractMetaschema.java
@@ -26,7 +26,6 @@
 
 package gov.nist.secauto.metaschema.model;
 
-import gov.nist.secauto.metaschema.model.configuration.ModelBindingConfiguration;
 import gov.nist.secauto.metaschema.model.info.Util;
 import gov.nist.secauto.metaschema.model.info.definitions.AssemblyDefinition;
 import gov.nist.secauto.metaschema.model.info.definitions.FieldDefinition;
@@ -55,7 +54,6 @@ public abstract class AbstractMetaschema implements Metaschema {
   private static final Logger logger = LogManager.getLogger(AbstractMetaschema.class);
 
   private final URI location;
-  private final ModelBindingConfiguration bindingConfiguration;
   private final Map<URI, Metaschema> importedMetaschema;
   private Map<String, InfoElementDefinition> usedInfoElementDefinitions;
   private Map<String, FlagDefinition> usedFlagDefinitions;
@@ -72,21 +70,14 @@ public abstract class AbstractMetaschema implements Metaschema {
    * @param importedMetaschema
    *          previously imported metaschema that this metaschema might import
    */
-  public AbstractMetaschema(URI metaschemaResource, ModelBindingConfiguration bindingConfiguration,
-      Map<URI, ? extends Metaschema> importedMetaschema) {
+  public AbstractMetaschema(URI metaschemaResource, Map<URI, ? extends Metaschema> importedMetaschema) {
     Objects.requireNonNull(metaschemaResource, "metaschemaResource");
-    Objects.requireNonNull(bindingConfiguration, "bindingConfiguration");
     Objects.requireNonNull(importedMetaschema, "importedMetaschema");
     this.location = metaschemaResource;
-    this.bindingConfiguration = bindingConfiguration;
     this.importedMetaschema = Collections.unmodifiableMap(importedMetaschema);
     logger.trace("Creating metaschema '{}'", metaschemaResource);
   }
 
-  public ModelBindingConfiguration getBindingConfiguration() {
-    return bindingConfiguration;
-  }
-
   @Override
   public Map<URI, Metaschema> getImportedMetaschema() {
     return importedMetaschema;
diff --git a/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/Metaschema.java b/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/Metaschema.java
index 358e710..3c4809e 100644
--- a/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/Metaschema.java
+++ b/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/Metaschema.java
@@ -69,5 +69,5 @@ public interface Metaschema {
 
   Map<String, AssemblyDefinition> getUsedAssemblyDefinitions();
 
-  String getPackageName();
+  //  String getPackageName();
 }
diff --git a/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/configuration/AbstractManagedObjectBindingConfiguration.java b/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/configuration/AbstractManagedObjectBindingConfiguration.java
deleted file mode 100644
index abff39e..0000000
--- a/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/configuration/AbstractManagedObjectBindingConfiguration.java
+++ /dev/null
@@ -1,73 +0,0 @@
-/**
- * Portions of this software was developed by employees of the National Institute
- * of Standards and Technology (NIST), an agency of the Federal Government and is
- * being made available as a public service. Pursuant to title 17 United States
- * Code Section 105, works of NIST employees are not subject to copyright
- * protection in the United States. This software may be subject to foreign
- * copyright. Permission in the United States and in foreign countries, to the
- * extent that NIST may hold copyright, to use, copy, modify, create derivative
- * works, and distribute this software and its documentation without fee is hereby
- * granted on a non-exclusive basis, provided that this notice and disclaimer
- * of warranty appears in all copies.
- *
- * THE SOFTWARE IS PROVIDED 'AS IS' WITHOUT ANY WARRANTY OF ANY KIND, EITHER
- * EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY
- * THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND FREEDOM FROM
- * INFRINGEMENT, AND ANY WARRANTY THAT THE DOCUMENTATION WILL CONFORM TO THE
- * SOFTWARE, OR ANY WARRANTY THAT THE SOFTWARE WILL BE ERROR FREE.  IN NO EVENT
- * SHALL NIST BE LIABLE FOR ANY DAMAGES, INCLUDING, BUT NOT LIMITED TO, DIRECT,
- * INDIRECT, SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM,
- * OR IN ANY WAY CONNECTED WITH THIS SOFTWARE, WHETHER OR NOT BASED UPON WARRANTY,
- * CONTRACT, TORT, OR OTHERWISE, WHETHER OR NOT INJURY WAS SUSTAINED BY PERSONS OR
- * PROPERTY OR OTHERWISE, AND WHETHER OR NOT LOSS WAS SUSTAINED FROM, OR AROSE OUT
- * OF THE RESULTS OF, OR USE OF, THE SOFTWARE OR SERVICES PROVIDED HEREUNDER.
- */
-
-package gov.nist.secauto.metaschema.model.configuration;
-
-import java.util.Collections;
-import java.util.List;
-
-public class AbstractManagedObjectBindingConfiguration implements ManagedObjectBingingConfiguration {
-  private final String className;
-  private final String baseClassName;
-  private final List<String> interfacesToImplement;
-
-  /**
-   * Constructs a new binding configuration for a Metaschema assembly or field.
-   * 
-   * @param className
-   *          the name of the class to use when generating code for this bound object, or {@code null}
-   *          if the default behavior is to be used
-   * @param baseClassName
-   *          the name of the class to extend the generated class from, or {@code null} if no
-   *          extension is to be used
-   * @param interfacesToImplement
-   *          additional interfaces to implement in the generated class, or {@code null} no interfaces
-   *          are to be implemented
-   */
-  public AbstractManagedObjectBindingConfiguration(String className, String baseClassName,
-      List<String> interfacesToImplement) {
-    this.className = className;
-    this.baseClassName = baseClassName;
-    this.interfacesToImplement
-        = interfacesToImplement != null ? Collections.unmodifiableList(interfacesToImplement) : Collections.emptyList();
-  }
-
-  @Override
-  public String getClassName() {
-    return className;
-  }
-
-  @Override
-  public String getQualifiedBaseClassName() {
-    return baseClassName;
-  }
-
-  @Override
-  public List<String> getInterfacesToImplement() {
-    return interfacesToImplement;
-  }
-
-}
diff --git a/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/info/definitions/AbstractAssemblyDefinition.java b/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/info/definitions/AbstractAssemblyDefinition.java
index 559174d..5b5b32f 100644
--- a/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/info/definitions/AbstractAssemblyDefinition.java
+++ b/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/info/definitions/AbstractAssemblyDefinition.java
@@ -26,20 +26,14 @@
 
 package gov.nist.secauto.metaschema.model.info.definitions;
 
-import com.sun.xml.bind.api.impl.NameConverter;
-
 import gov.nist.secauto.metaschema.model.Metaschema;
-import gov.nist.secauto.metaschema.model.configuration.AssemblyBindingConfiguration;
 import gov.nist.secauto.metaschema.model.info.Type;
 import gov.nist.secauto.metaschema.model.info.instances.AssemblyInstance;
 import gov.nist.secauto.metaschema.model.info.instances.FieldInstance;
 import gov.nist.secauto.metaschema.model.info.instances.FlagInstance;
 
-import java.util.Objects;
-
 public abstract class AbstractAssemblyDefinition<METASCHEMA extends Metaschema>
     extends AbstractInfoElementDefinition<METASCHEMA> implements AssemblyDefinition {
-  private final AssemblyBindingConfiguration bindingConfiguration;
 
   /**
    * Constructs a new definition of a Metaschema Assembly.
@@ -49,10 +43,8 @@ public abstract class AbstractAssemblyDefinition<METASCHEMA extends Metaschema>
    * @param metaschema
    *          the containing Metaschema
    */
-  public AbstractAssemblyDefinition(AssemblyBindingConfiguration bindingConfiguration, METASCHEMA metaschema) {
+  public AbstractAssemblyDefinition(METASCHEMA metaschema) {
     super(metaschema);
-    Objects.requireNonNull(bindingConfiguration, "bindingConfiguration");
-    this.bindingConfiguration = bindingConfiguration;
   }
 
   @Override
@@ -60,24 +52,6 @@ public abstract class AbstractAssemblyDefinition<METASCHEMA extends Metaschema>
     return Type.ASSEMBLY;
   }
 
-  protected AssemblyBindingConfiguration getBindingConfiguration() {
-    return bindingConfiguration;
-  }
-
-  @Override
-  public String getClassName() {
-    String retval = getBindingConfiguration().getClassName();
-    if (retval == null) {
-      retval = NameConverter.standard.toClassName(getName());
-    }
-    return retval;
-  }
-
-  @Override
-  public String getPackageName() {
-    return getContainingMetaschema().getPackageName();
-  }
-
   @Override
   public FlagInstance getFlagInstanceByName(String name) {
     return getFlagInstances().get(name);
diff --git a/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/info/definitions/AbstractFieldDefinition.java b/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/info/definitions/AbstractFieldDefinition.java
index ef51ee6..dbd0fd6 100644
--- a/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/info/definitions/AbstractFieldDefinition.java
+++ b/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/info/definitions/AbstractFieldDefinition.java
@@ -26,18 +26,12 @@
 
 package gov.nist.secauto.metaschema.model.info.definitions;
 
-import com.sun.xml.bind.api.impl.NameConverter;
-
 import gov.nist.secauto.metaschema.model.Metaschema;
-import gov.nist.secauto.metaschema.model.configuration.FieldBindingConfiguration;
 import gov.nist.secauto.metaschema.model.info.Type;
 import gov.nist.secauto.metaschema.model.info.instances.FlagInstance;
 
-import java.util.Objects;
-
 public abstract class AbstractFieldDefinition<METASCHEMA extends Metaschema>
     extends AbstractInfoElementDefinition<METASCHEMA> implements FieldDefinition {
-  private final FieldBindingConfiguration bindingConfiguration;
 
   /**
    * Constructs a binding definition for a Metaschema Field.
@@ -47,10 +41,8 @@ public abstract class AbstractFieldDefinition<METASCHEMA extends Metaschema>
    * @param metaschema
    *          the containing Metaschema
    */
-  public AbstractFieldDefinition(FieldBindingConfiguration bindingConfiguration, METASCHEMA metaschema) {
+  public AbstractFieldDefinition(METASCHEMA metaschema) {
     super(metaschema);
-    Objects.requireNonNull(bindingConfiguration, "bindingConfiguration");
-    this.bindingConfiguration = bindingConfiguration;
   }
 
   @Override
@@ -58,25 +50,6 @@ public abstract class AbstractFieldDefinition<METASCHEMA extends Metaschema>
     return Type.FIELD;
   }
 
-  protected FieldBindingConfiguration getBindingConfiguration() {
-    return bindingConfiguration;
-  }
-
-  @Override
-  public String getClassName() {
-    String retval = getBindingConfiguration().getClassName();
-    if (retval == null) {
-      retval = NameConverter.standard.toClassName(getName());
-      ;
-    }
-    return retval;
-  }
-
-  @Override
-  public String getPackageName() {
-    return getContainingMetaschema().getPackageName();
-  }
-
   @Override
   public FlagInstance getFlagInstanceByName(String name) {
     return getFlagInstances().get(name);
diff --git a/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/info/definitions/ManagedObject.java b/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/info/definitions/ManagedObject.java
index a49e15b..de5fc16 100644
--- a/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/info/definitions/ManagedObject.java
+++ b/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/info/definitions/ManagedObject.java
@@ -33,7 +33,7 @@ public interface ManagedObject extends FlagContainer, InfoElementDefinition {
 
   FlagInstance getJsonKeyFlagInstance();
 
-  String getPackageName();
+//  String getPackageName();
 
-  String getClassName();
+//  String getClassName();
 }
diff --git a/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/xml/XmlAssemblyDefinition.java b/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/xml/XmlAssemblyDefinition.java
index d5795c1..d02912e 100644
--- a/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/xml/XmlAssemblyDefinition.java
+++ b/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/xml/XmlAssemblyDefinition.java
@@ -29,12 +29,9 @@ package gov.nist.secauto.metaschema.model.xml;
 import gov.nist.itl.metaschema.model.xml.AssemblyDocument;
 import gov.nist.itl.metaschema.model.xml.ChoiceDocument;
 import gov.nist.itl.metaschema.model.xml.DefineAssemblyDocument;
-import gov.nist.itl.metaschema.model.xml.ExtensionType;
 import gov.nist.itl.metaschema.model.xml.FieldDocument;
 import gov.nist.itl.metaschema.model.xml.FlagDocument;
-import gov.nist.itl.metaschema.model.xml.binding.DefineAssemblyBindingDocument;
 import gov.nist.secauto.metaschema.datatypes.markup.MarkupLine;
-import gov.nist.secauto.metaschema.model.configuration.AssemblyBindingConfiguration;
 import gov.nist.secauto.metaschema.model.info.Type;
 import gov.nist.secauto.metaschema.model.info.definitions.AbstractAssemblyDefinition;
 import gov.nist.secauto.metaschema.model.info.definitions.AssemblyDefinition;
@@ -54,34 +51,6 @@ import java.util.Map;
 import java.util.stream.Collectors;
 
 public class XmlAssemblyDefinition extends AbstractAssemblyDefinition<XmlMetaschema> implements AssemblyDefinition {
-
-  protected static AssemblyBindingConfiguration
-      getBindingConfiguration(DefineAssemblyDocument.DefineAssembly xmlField) {
-    AssemblyBindingConfiguration retval = null;
-    if (xmlField.isSetExtensions()) {
-      DefineAssemblyDocument.DefineAssembly.Extensions extensions = xmlField.getExtensions();
-      for (ExtensionType extensionInstance : extensions.getDefineAssemblyExtensionList()) {
-        System.out.println("Extension Class: " + extensionInstance.getClass().getName());
-        if (extensionInstance instanceof DefineAssemblyBindingDocument.DefineAssemblyBinding) {
-          DefineAssemblyBindingDocument.DefineAssemblyBinding modelConfig
-              = (DefineAssemblyBindingDocument.DefineAssemblyBinding) extensionInstance;
-          if (modelConfig.isSetJava()) {
-            DefineAssemblyBindingDocument.DefineAssemblyBinding.Java modelJava = modelConfig.getJava();
-
-            retval = new AssemblyBindingConfiguration(modelJava.getClassName(), modelJava.getBaseClassName(),
-                modelJava.getInterfaceNameList());
-            break;
-          }
-        }
-      }
-    }
-
-    if (retval == null) {
-      retval = AssemblyBindingConfiguration.NULL_CONFIG;
-    }
-    return retval;
-  }
-
   private final DefineAssemblyDocument.DefineAssembly xmlAssembly;
   private final Map<String, XmlFlagInstance> flagInstances;
   private final Map<String, ModelInstance> namedModelInstances;
@@ -98,7 +67,7 @@ public class XmlAssemblyDefinition extends AbstractAssemblyDefinition<XmlMetasch
    *          the containing Metaschema
    */
   public XmlAssemblyDefinition(DefineAssemblyDocument.DefineAssembly xmlAssembly, XmlMetaschema metaschema) {
-    super(getBindingConfiguration(xmlAssembly), metaschema);
+    super(metaschema);
     this.xmlAssembly = xmlAssembly;
     //
     // MarkupStringConverter.toMarkupString(getXmlAssembly().getDescription());
diff --git a/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/xml/XmlFieldDefinition.java b/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/xml/XmlFieldDefinition.java
index 92316d0..f018a4e 100644
--- a/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/xml/XmlFieldDefinition.java
+++ b/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/xml/XmlFieldDefinition.java
@@ -27,12 +27,9 @@
 package gov.nist.secauto.metaschema.model.xml;
 
 import gov.nist.itl.metaschema.model.xml.DefineFieldDocument;
-import gov.nist.itl.metaschema.model.xml.ExtensionType;
 import gov.nist.itl.metaschema.model.xml.FlagDocument;
 import gov.nist.itl.metaschema.model.xml.JsonValueKeyDocument.JsonValueKey;
-import gov.nist.itl.metaschema.model.xml.binding.DefineFieldBindingDocument;
 import gov.nist.secauto.metaschema.datatypes.markup.MarkupLine;
-import gov.nist.secauto.metaschema.model.configuration.FieldBindingConfiguration;
 import gov.nist.secauto.metaschema.model.info.definitions.AbstractFieldDefinition;
 import gov.nist.secauto.metaschema.model.info.definitions.DataType;
 import gov.nist.secauto.metaschema.model.info.definitions.FieldDefinition;
@@ -43,33 +40,6 @@ import java.util.LinkedHashMap;
 import java.util.Map;
 
 public class XmlFieldDefinition extends AbstractFieldDefinition<XmlMetaschema> implements FieldDefinition {
-
-  protected static FieldBindingConfiguration getBindingConfiguration(DefineFieldDocument.DefineField xmlField) {
-    FieldBindingConfiguration retval = null;
-    if (xmlField.isSetExtensions()) {
-      DefineFieldDocument.DefineField.Extensions extensions = xmlField.getExtensions();
-      for (ExtensionType extensionInstance : extensions.getDefineFieldExtensionList()) {
-        System.out.println("Extension Class: " + extensionInstance.getClass().getName());
-        if (extensionInstance instanceof DefineFieldBindingDocument.DefineFieldBinding) {
-          DefineFieldBindingDocument.DefineFieldBinding modelConfig
-              = (DefineFieldBindingDocument.DefineFieldBinding) extensionInstance;
-          if (modelConfig.isSetJava()) {
-            DefineFieldBindingDocument.DefineFieldBinding.Java modelJava = modelConfig.getJava();
-
-            retval = new FieldBindingConfiguration(modelJava.getClassName(), modelJava.getBaseClassName(),
-                modelJava.getInterfaceNameList());
-            break;
-          }
-        }
-      }
-    }
-
-    if (retval == null) {
-      retval = FieldBindingConfiguration.NULL_CONFIG;
-    }
-    return retval;
-  }
-
   private final DefineFieldDocument.DefineField xmlField;
   private final Map<String, XmlFlagInstance> flagInstances;
 
@@ -82,7 +52,7 @@ public class XmlFieldDefinition extends AbstractFieldDefinition<XmlMetaschema> i
    *          the containing Metaschema
    */
   public XmlFieldDefinition(DefineFieldDocument.DefineField xmlField, XmlMetaschema metaschema) {
-    super(getBindingConfiguration(xmlField), metaschema);
+    super(metaschema);
     this.xmlField = xmlField;
 
     int numFlags = xmlField.sizeOfFlagArray();
diff --git a/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/xml/XmlMetaschema.java b/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/xml/XmlMetaschema.java
index be7122e..77f0ae7 100644
--- a/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/xml/XmlMetaschema.java
+++ b/java/metaschema-model/src/main/java/gov/nist/secauto/metaschema/model/xml/XmlMetaschema.java
@@ -26,21 +26,14 @@
 
 package gov.nist.secauto.metaschema.model.xml;
 
-import com.sun.xml.bind.api.impl.NameConverter;
-
 import gov.nist.itl.metaschema.model.xml.DefineAssemblyDocument;
 import gov.nist.itl.metaschema.model.xml.DefineFieldDocument;
 import gov.nist.itl.metaschema.model.xml.DefineFlagDocument;
-import gov.nist.itl.metaschema.model.xml.ExtensionType;
 import gov.nist.itl.metaschema.model.xml.ImportDocument;
 import gov.nist.itl.metaschema.model.xml.METASCHEMADocument;
-import gov.nist.itl.metaschema.model.xml.METASCHEMADocument.METASCHEMA;
-import gov.nist.itl.metaschema.model.xml.METASCHEMADocument.METASCHEMA.Extensions;
-import gov.nist.itl.metaschema.model.xml.binding.ModelBindingDocument;
 import gov.nist.secauto.metaschema.model.AbstractMetaschema;
 import gov.nist.secauto.metaschema.model.Metaschema;
 import gov.nist.secauto.metaschema.model.MetaschemaException;
-import gov.nist.secauto.metaschema.model.configuration.ModelBindingConfiguration;
 import gov.nist.secauto.metaschema.model.info.Util;
 import gov.nist.secauto.metaschema.model.info.definitions.InfoElementDefinition;
 
@@ -137,30 +130,6 @@ public class XmlMetaschema extends AbstractMetaschema {
     return retval;
   }
 
-  protected static ModelBindingConfiguration getBindingConfiguration(METASCHEMADocument metaschema) {
-    ModelBindingConfiguration retval = null;
-    METASCHEMA modelMetaschema = metaschema.getMETASCHEMA();
-    if (modelMetaschema.isSetExtensions()) {
-      Extensions extensions = modelMetaschema.getExtensions();
-      for (ExtensionType extensionInstance : extensions.getModelExtensionList()) {
-        System.out.println("Extension Class: " + extensionInstance.getClass().getName());
-        if (extensionInstance instanceof ModelBindingDocument.ModelBinding) {
-          ModelBindingDocument.ModelBinding modelConfig = (ModelBindingDocument.ModelBinding) extensionInstance;
-          if (modelConfig.isSetJava()) {
-            ModelBindingDocument.ModelBinding.Java modelJava = modelConfig.getJava();
-            retval = new ModelBindingConfiguration(modelJava.getPackageName());
-            break;
-          }
-        }
-      }
-    }
-
-    if (retval == null) {
-      retval = ModelBindingConfiguration.NULL_CONFIG;
-    }
-    return retval;
-  }
-
   private final METASCHEMADocument metaschema;
   private final Map<String, InfoElementDefinition> infoElementDefinitions;
   private final Map<String, XmlFlagDefinition> flagDefinitions;
@@ -181,7 +150,7 @@ public class XmlMetaschema extends AbstractMetaschema {
    */
   public XmlMetaschema(URI resource, METASCHEMADocument metaschemaXml, Map<URI, Metaschema> importedMetaschema)
       throws MetaschemaException {
-    super(resource, getBindingConfiguration(metaschemaXml), importedMetaschema);
+    super(resource, importedMetaschema);
     this.metaschema = metaschemaXml;
 
     XmlCursor cursor = metaschema.getMETASCHEMA().newCursor();
@@ -235,15 +204,6 @@ public class XmlMetaschema extends AbstractMetaschema {
     return URI.create(metaschema.getMETASCHEMA().getNamespace());
   }
 
-  @Override
-  public String getPackageName() {
-    String packageName = getBindingConfiguration().getPackageName();
-    if (packageName == null) {
-      packageName = NameConverter.standard.toPackageName(getXmlNamespace().toString());
-    }
-    return packageName;
-  }
-
   @Override
   public Map<String, InfoElementDefinition> getInfoElementDefinitions() {
     return infoElementDefinitions;
diff --git a/java/pom.xml b/java/pom.xml
index b3f454c..ec5e41a 100644
--- a/java/pom.xml
+++ b/java/pom.xml
@@ -126,17 +126,6 @@
 				<version>${project.version}</version>
 			</dependency>
 
-			<dependency>
-				<groupId>javax.activation</groupId>
-				<artifactId>activation</artifactId>
-				<version>1.1.1</version>
-			</dependency>
-			<dependency>
-				<groupId>javax.validation</groupId>
-				<artifactId>validation-api</artifactId>
-				<version>2.0.1.Final</version>
-			</dependency>
-
 			<dependency>
 				<groupId>org.apache.xmlbeans</groupId>
 				<artifactId>xmlbeans</artifactId>
@@ -257,6 +246,7 @@
 				<artifactId>commons-lang3</artifactId>
 				<version>3.9</version>
 			</dependency>
+
 			<dependency>
 				<groupId>org.junit.jupiter</groupId>
 				<artifactId>junit-jupiter-api</artifactId>
@@ -285,10 +275,6 @@
 		</dependencies>
 	</dependencyManagement>
 	<dependencies>
-		<dependency>
-			<groupId>javax.validation</groupId>
-			<artifactId>validation-api</artifactId>
-		</dependency>
 		<dependency>
 			<groupId>org.junit.jupiter</groupId>
 			<artifactId>junit-jupiter-api</artifactId>
@@ -313,7 +299,7 @@
 					<groupId>org.apache.maven.plugins</groupId>
 					<artifactId>maven-javadoc-plugin</artifactId>
 					<configuration>
-						<!--  this is a hack to fix a javadoc bug -->
+						<!-- this is a hack to fix a javadoc bug -->
 						<detectJavaApiLink>false</detectJavaApiLink>
 					</configuration>
 				</plugin>
